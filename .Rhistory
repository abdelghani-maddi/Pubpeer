mutate(Auteur_Num = gsub("\\[\\[\\d+\\]\\]\\[\\[", "", Roles),
Auteur_Num = gsub("\\]\\]", "", Auteur_Num),
Auteur_Num = as.integer(Auteur_Num),
Auteur = paste("Auteur", Auteur_Num)) %>%
select(-Auteur_Num)
View(df)
# Create a dataframe from the found results
df <- do.call(rbind, results)
# transformer en dataframe
df <- as.data.frame(df)
# Éclater la colonne Authors
df <- df %>%
mutate(Authors = map(Authors, ~strsplit(.x, ","))) %>%
unnest(Authors)
# Créer un groupe distinct pour chaque DOI
df <- df %>%
group_by(DOI) %>%
mutate(Auteur_Num = row_number())
# Modifier les noms des auteurs en fonction du numéro d'auteur
df <- df %>%
mutate(Auteur = Auteur_Num)
# Supprimer la colonne Auteur_Num si nécessaire
df <- df %>%
select(-Auteur_Num)
# Éclater la colonne Roles en plusieurs lignes
df <- df %>%
separate_rows(Roles, sep = ",\\s*")
View(df)
# Create a dataframe from the found results
df <- do.call(rbind, results)
# transformer en dataframe
df <- as.data.frame(df)
# Éclater la colonne Authors
df <- df %>%
mutate(Authors = map(Authors, ~strsplit(.x, ","))) %>%
unnest(Authors)
# Créer un groupe distinct pour chaque DOI
df <- df %>%
group_by(DOI) %>%
mutate(Auteur_Num = row_number())
# Modifier les noms des auteurs en fonction du numéro d'auteur
df <- df %>%
mutate(Auteur = Auteur_Num)
# Supprimer la colonne Auteur_Num si nécessaire
df <- df %>%
select(-Auteur_Num)
# Utiliser la fonction unnest pour éclater la colonne Roles
df2 <- unnest(df, cols = Roles, keep_empty = FALSE)
View(df2)
# Create a dataframe from the found results
df <- do.call(rbind, results)
# transformer en dataframe
df <- as.data.frame(df)
# Éclater la colonne Authors
df <- df %>%
mutate(Authors = map(Authors, ~strsplit(.x, ","))) %>%
unnest(Authors)
# Créer un groupe distinct pour chaque DOI
df <- df %>%
group_by(DOI) %>%
mutate(Auteur_Num = row_number())
# Modifier les noms des auteurs en fonction du numéro d'auteur
df <- df %>%
mutate(Auteur = Auteur_Num)
# Supprimer la colonne Auteur_Num si nécessaire
df <- df %>%
select(-Auteur_Num)
# Utiliser la fonction unnest pour éclater la colonne Roles
df2 <- df %>%
select(DOI, Roles) %>%
unique() %>%
unnest(df, cols = Roles, keep_empty = FALSE)
View(df2)
# Utiliser la fonction unnest pour éclater la colonne Roles
df2 <- df %>%
select(DOI, Roles) %>%
unique() %>%
unnest(., cols = Roles, keep_empty = FALSE)
View(df2)
View(df2)
df <- merge(df, df2, by = "DOI")
df <- merge(df, df2, by = DOI)
# Joindre les dataframes df et df2 à partir du rowname
merged_df <- merge(df, df2, by = "row.names", all = TRUE)
View(merged_df)
# Utiliser la fonction unnest pour éclater la colonne Roles
df2 <- df %>%
select(Roles) %>%
unique() %>%
unnest(., cols = Roles, keep_empty = FALSE)
# Utiliser la fonction unnest pour éclater la colonne Roles
df2 <- df %>%
select(Roles) %>%
unique() %>%
unnest(., cols = Roles, keep_empty = FALSE)
# Joindre les dataframes df et df2 à partir du rowname
merged_df <- merge(df, df2$Roles, by = "row.names", all = TRUE)
# Create a dataframe from the found results
df <- do.call(rbind, results)
# transformer en dataframe
df <- as.data.frame(df)
# Éclater la colonne Authors
df <- df %>%
mutate(Authors = map(Authors, ~strsplit(.x, ","))) %>%
unnest(Authors)
# Créer un groupe distinct pour chaque DOI
df <- df %>%
group_by(DOI) %>%
mutate(Auteur_Num = row_number())
# Modifier les noms des auteurs en fonction du numéro d'auteur
df <- df %>%
mutate(Auteur = Auteur_Num)
# Supprimer la colonne Auteur_Num si nécessaire
df <- df %>%
select(-Auteur_Num)
# Utiliser la fonction unnest pour éclater la colonne Roles
df2 <- df %>%
select(Roles) %>%
unique() %>%
unnest(., cols = Roles, keep_empty = FALSE)
# Joindre les dataframes df et df2 à partir du rowname
merged_df <- merge(df, df2$Roles, by = "row.names", all = TRUE)
View(merged_df)
# Joindre les dataframes df et df2 à partir du rowname
merged_df <- merge(df, df2, by = "row.names", all = TRUE)
df <- do.call(rbind, results)
# transformer en dataframe
df <- as.data.frame(df)
# Éclater la colonne Authors
df <- df %>%
mutate(Authors = map(Authors, ~strsplit(.x, ","))) %>%
unnest(Authors)
# Créer un groupe distinct pour chaque DOI
df <- df %>%
group_by(DOI) %>%
mutate(Auteur_Num = row_number())
# Modifier les noms des auteurs en fonction du numéro d'auteur
df <- df %>%
mutate(Auteur = Auteur_Num)
# Supprimer la colonne Auteur_Num si nécessaire
df <- df %>%
select(-Auteur_Num)
# Utiliser la fonction unnest pour éclater la colonne Roles
df2 <- df %>%
select(Roles) %>%
unique() %>%
unnest(., cols = Roles, keep_empty = FALSE)
# Joindre les dataframes df et df2 à partir du rowname
df <- merge(df, df2, by = "row.names", all = TRUE)
View(df)
View(df2)
# Create a dataframe from the found results
df <- do.call(rbind, results)
# transformer en dataframe
df <- as.data.frame(df)
# Éclater la colonne Authors
df <- df %>%
mutate(Authors = map(Authors, ~strsplit(.x, ","))) %>%
unnest(Authors)
# Créer un groupe distinct pour chaque DOI
df <- df %>%
group_by(DOI) %>%
mutate(Auteur_Num = row_number())
# Modifier les noms des auteurs en fonction du numéro d'auteur
df <- df %>%
mutate(Auteur = Auteur_Num)
# Supprimer la colonne Auteur_Num si nécessaire
df <- df %>%
select(-Auteur_Num)
# Utiliser la fonction unnest pour éclater la colonne Roles
df2 <- df %>%
select(Roles) %>%
unique() %>%
unnest(., cols = Roles, keep_empty = FALSE)
# Joindre les dataframes df et df2 à partir du rowname
df <- merge(df, df2, by = "row.names", all = TRUE)
View(df)
df3 <- df %>%
select(df$DOI.x, df$Funding, df$Auteur, df$Roles.y)
df3 <- df[,c(2,3,4,6,8)]
View(df3)
df3 <- df3 %>%
mutate(ID = match(DOI, unique(DOI)))
df3 <- df3 %>%
mutate(ID = match(DOI.x, unique(DOI)))
View(df3)
names(df3) = c("DOI", "funding", "authors", "authors_num", "Roles")
df3 <- df3 %>%
mutate(ID = match(DOI, unique(DOI)))
View(df3)
df <- df[,c(2,3,4,6,8)]
names(df3) = c("DOI", "funding", "authors", "authors_num", "Roles")
df <- df %>%
mutate(ID = match(DOI, unique(DOI)))
View(df)
names(df) = c("DOI", "funding", "authors", "authors_num", "Roles")
df <- df %>%
mutate(ID = match(DOI, unique(DOI)))
# Supprimer la chaîne de caractères "Roles " de la colonne Roles
df$Roles <- gsub("Roles ", "", df$Roles)
View(df)
# Supprimer la chaîne de caractères "Roles " de la colonne Roles
df$Roles <- gsub("Roles ", "", df$Roles)
View(df)
# Supprimer la chaîne de caractères "Roles " de la colonne Roles
df$Roles <- gsub("Roles    ", "", df$Roles)
# Supprimer la chaîne de caractères "Roles" et les espaces vides qui le suivent de la colonne Roles
df$Roles <- gsub("Roles\\s+", "", df$Roles)
View(df)
rm(list = ls()) #supprimer tous les objets
# Load the rvest library
library(rvest)
# Create an empty list to store the results
results <- list()
# Define the function to extract information from a page
extract_info <- function(url) {
# Read the web page
webpage <- read_html(url)
# Extract the DOI
doi <- webpage %>% html_nodes('meta[name="citation_doi"]') %>% html_attr("content")
# Extract the funding information
funding <- webpage %>% html_nodes('p:contains("Funding:")') %>% html_text() %>% gsub("^.*Funding: ", "", .)
# Extract the list of authors and their roles
authors <- webpage %>% html_nodes('a.author-name') %>% html_text()
roles <- list()
# Extract the roles for each author
for (i in 0:(length(authors) - 1)) {
author_roles <- webpage %>%
html_nodes(paste0('a[data-author-id="', i, '"] ~ div.author-info p#authRoles')) %>%
html_text() %>%
gsub("^Roles", "", .) %>%
trimws()
roles[[i + 1]] <- author_roles
}
# Return the results as a list
result <- list(DOI = doi, Funding = funding, Authors = authors, Roles = roles)
return(result)
}
# Loop through the article numbers
for (i in 0084227:290000) {
# Construct the URL of the page
url <- paste0("https://journals.plos.org/plosone/article?id=10.1371/journal.pone.", sprintf("%07d", i))
# Try to extract the information from the page
tryCatch({
info <- extract_info(url)
# Add the extracted information to the results list
results[[i]] <- info
# Display the progress
cat("Article", i, ":", info$DOI, "extracted\n")
}, error = function(e) {
# Ignore the HTTP 404 error (page not found)
if (grepl("404", e$message)) {
cat("Article", i, "not found\n")
} else {
# Other errors not related to page not found
stop(e)
}
})
}
# Create a dataframe from the found results
df <- do.call(rbind, results)
# transformer en dataframe
df <- as.data.frame(df)
# Éclater la colonne Authors
df <- df %>%
mutate(Authors = map(Authors, ~strsplit(.x, ","))) %>%
unnest(Authors)
# Créer un groupe distinct pour chaque DOI
df <- df %>%
group_by(DOI) %>%
mutate(Auteur_Num = row_number())
# Modifier les noms des auteurs en fonction du numéro d'auteur
df <- df %>%
mutate(Auteur = Auteur_Num)
# Supprimer la colonne Auteur_Num si nécessaire
df <- df %>%
select(-Auteur_Num)
# Utiliser la fonction unnest pour éclater la colonne Roles
df2 <- df %>%
select(Roles) %>%
unique() %>%
unnest(., cols = Roles, keep_empty = FALSE)
# Joindre les dataframes df et df2 à partir du rowname
df <- merge(df, df2, by = "row.names", all = TRUE)
df <- df[,c(2,3,4,6,8)]
names(df) = c("DOI", "funding", "authors", "authors_num", "Roles")
df <- df %>%
mutate(ID = match(DOI, unique(DOI)))
# Supprimer la chaîne de caractères "Roles" et les espaces vides qui le suivent de la colonne Roles
df$Roles <- gsub("Roles\\s+", "", df$Roles)
write.xlsx(df, "~/Documents/APC Jaime Texiea/df_84227_a_86929.xlsx")
write.xlsx(df, "~/Documents/APC Jaime Texiera/df_84227_a_86929.xlsx")
View(df)
rm(list = ls()) #supprimer tous les objets
# Load the rvest library
library(rvest)
# Create an empty list to store the results
results <- list()
# Define the function to extract information from a page
extract_info <- function(url) {
# Read the web page
webpage <- read_html(url)
# Extract the DOI
doi <- webpage %>% html_nodes('meta[name="citation_doi"]') %>% html_attr("content")
# Extract the funding information
funding <- webpage %>% html_nodes('p:contains("Funding:")') %>% html_text() %>% gsub("^.*Funding: ", "", .)
# Extract the list of authors and their roles
authors <- webpage %>% html_nodes('a.author-name') %>% html_text()
roles <- list()
# Extract the roles for each author
for (i in 0:(length(authors) - 1)) {
author_roles <- webpage %>%
html_nodes(paste0('a[data-author-id="', i, '"] ~ div.author-info p#authRoles')) %>%
html_text() %>%
gsub("^Roles", "", .) %>%
trimws()
roles[[i + 1]] <- author_roles
}
# Return the results as a list
result <- list(DOI = doi, Funding = funding, Authors = authors, Roles = roles)
return(result)
}
# Loop through the article numbers
for (i in 0189266:290000) {
# Construct the URL of the page
url <- paste0("https://journals.plos.org/plosone/article?id=10.1371/journal.pone.", sprintf("%07d", i))
# Try to extract the information from the page
tryCatch({
info <- extract_info(url)
# Add the extracted information to the results list
results[[i]] <- info
# Display the progress
cat("Article", i, ":", info$DOI, "extracted\n")
}, error = function(e) {
# Ignore the HTTP 404 error (page not found)
if (grepl("404", e$message)) {
cat("Article", i, "not found\n")
} else {
# Other errors not related to page not found
stop(e)
}
})
}
# Load the rvest library
library(rvest)
# Create an empty list to store the results
results <- list()
# Define the function to extract information from a page
extract_info <- function(url) {
# Read the web page
webpage <- read_html(url)
# Extract the DOI
doi <- webpage %>% html_nodes('meta[name="citation_doi"]') %>% html_attr("content")
# Extract the funding information
funding <- webpage %>% html_nodes('p:contains("Funding:")') %>% html_text() %>% gsub("^.*Funding: ", "", .)
# Extract the list of authors and their roles
authors <- webpage %>% html_nodes('a.author-name') %>% html_text()
roles <- list()
# Extract the roles for each author
for (i in seq_along(authors)) {
author_roles <- webpage %>%
html_nodes(paste0('a[data-author-id="', i, '"] ~ div.author-info p#authRoles')) %>%
html_text() %>%
gsub("^Roles", "", .) %>%
trimws()
roles <- append(roles, list(author_roles))
}
# Return the results as a list
result <- list(DOI = doi, Funding = funding, Authors = authors, Roles = roles)
return(result)
}
# Loop through the article numbers
for (i in 0189266:290000) {
# Construct the URL of the page
url <- paste0("https://journals.plos.org/plosone/article?id=10.1371/journal.pone.", sprintf("%07d", i))
# Try to extract the information from the page
tryCatch({
info <- extract_info(url)
# Add the extracted information to the results list
results[[i]] <- info
# Display the progress
cat("Article", i, ":", info$DOI, "extracted\n")
}, error = function(e) {
# Ignore the HTTP 404 error (page not found)
if (grepl("404", e$message)) {
cat("Article", i, "not found\n")
} else {
# Other errors not related to page not found
stop(e)
}
})
}
# Create a dataframe from the found results
df <- do.call(rbind, results)
# transformer en dataframe
df <- as.data.frame(df)
write.xlsx(df, "~/Documents/APC Jaime Texiera/df_0189266_a_290000.xlsx")
View(df)
# Créer un groupe distinct pour chaque DOI
df <- df %>%
group_by(DOI) %>%
mutate(Auteur_Num = row_number())
# Modifier les noms des auteurs en fonction du numéro d'auteur
df <- df %>%
mutate(Auteur = Auteur_Num)
# Supprimer la colonne Auteur_Num si nécessaire
df <- df %>%
select(-Auteur_Num)
# Utiliser la fonction unnest pour éclater la colonne Roles
df2 <- df %>%
select(Roles) %>%
unique() %>%
unnest(., cols = Roles, keep_empty = FALSE)
# Joindre les dataframes df et df2 à partir du rowname
df <- merge(df, df2, by = "row.names", all = TRUE)
df <- df[,c(2,3,4,6,8)]
names(df) = c("DOI", "funding", "authors", "authors_num", "Roles")
df <- df %>%
mutate(ID = match(DOI, unique(DOI)))
# Supprimer la chaîne de caractères "Roles" et les espaces vides qui le suivent de la colonne Roles
df$Roles <- gsub("Roles\\s+", "", df$Roles)
write.xlsx(df, "~/Documents/APC Jaime Texiera/df_plos.xlsx")
View(df)
View(df2)
# Create a dataframe from the found results
df <- do.call(rbind, results)
# transformer en dataframe
df <- as.data.frame(df)
View(df)
# Supprimer les lignes avec une liste vide dans la colonne "Roles"
df3 <- subset(df, length(Roles) > 0)
View(df3)
View(df3[[4]][[117]])
View(df3[[4]][[117]])
df3[[4]][[117]]
# Supprimer les lignes avec une liste vide dans la colonne "Roles"
df3 <- df[lapply(df$Roles, length) > 0, ]
View(df3)
View(df3[[4]][[162]])
View(df3[[4]][[308]])
# Éclater la colonne Authors
df3 <- df3 %>%
mutate(Authors = map(Authors, ~strsplit(.x, ","))) %>%
unnest(Authors)
View(df3)
# Supprimer les lignes avec une liste vide dans la colonne "Roles"
df3 <- df[lapply(df$Roles, length) > 0, ]
View(df3)
# Éclater la colonne Authors
df3 <- df3 %>%
mutate(Authors = map(Authors, ~strsplit(.x, ","))) %>%
unnest(Authors)
View(df3)
write.xlsx(df, "~/Documents/APC Jaime Texiera/df_0189266_a_290000_v2.xlsx")
write.xlsx(df3, "~/Documents/APC Jaime Texiera/df_0189266_a_290000_v2.xlsx")
# Créer un groupe distinct pour chaque DOI
df3 <- df3 %>%
group_by(DOI) %>%
mutate(Auteur_Num = row_number())
# Modifier les noms des auteurs en fonction du numéro d'auteur
df3 <- df3 %>%
mutate(Auteur = Auteur_Num)
# Supprimer la colonne Auteur_Num si nécessaire
df3 <- df3 %>%
select(-Auteur_Num)
# Utiliser la fonction unnest pour éclater la colonne Roles
df2 <- df3 %>%
select(Roles) %>%
unique() %>%
unnest(., cols = Roles, keep_empty = FALSE)
# Joindre les dataframes df et df2 à partir du rowname
df4 <- merge(df3, df2, by = "row.names", all = TRUE)
df4 <- df4[,c(2,3,4,6,8)]
names(df4) = c("DOI", "funding", "authors", "authors_num", "Roles")
View(df4)
View(df3)
View(df3)
View(df)
# Create a dataframe from the found results
df <- do.call(rbind, results)
# transformer en dataframe
df <- as.data.frame(df)
# Supprimer les lignes avec une liste vide dans la colonne "Roles"
df3 <- df[lapply(df$Roles, length) > 0, ]
# Supprimer la chaîne de caractères "Roles" et les espaces vides qui le suivent de la colonne Roles
df4$Roles <- gsub("Roles\\s+", "", df4$Roles)
df4$Roles[1]
# Diviser les chaînes de caractères en vecteurs
df4 <- df4 %>%
separate_rows(Roles, sep = "\\s*,\\s*")
View(df)
write.xlsx(df, "~/Documents/APC Jaime Texiera/row_data.xlsx")
library(rvest)
library(xml2)
library(rvest)
library(dplyr)
library(package)
write.xlsx(df, "~/Documents/APC Jaime Texiera/row_data.xlsx")
library(tidyverse)
library(questionr)
library(RPostgres)
library(gtsummary)
library(openxlsx2)
library(openxlsx)
library(readxl)
write.xlsx(df, "~/Documents/APC Jaime Texiera/row_data.xlsx")
View(df4)
View(df[[4]][[15717]])
df[[4]][[15717]]
write.xlsx(df, "~/Documents/APC Jaime Texiera/data_roles.xlsx")
write.xlsx(df, "~/Documents/APC Jaime Texiera/row_data.xlsx")
write.xlsx(df4, "~/Documents/APC Jaime Texiera/data_roles.xlsx")
