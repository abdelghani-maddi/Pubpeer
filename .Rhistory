mutate(IsFirstLast = if_else(AuthorNumber == 1 | AuthorNumber == max(AuthorNumber), 1, 0),
nb_aut = max(AuthorNumber),
FirstName = word(Author, 1))
# Utiliser la fonction separate_rows pour séparer les valeurs de la colonne 'Author' en lignes
rtw_melted <- rtw %>%
separate_rows(Author, sep = ";") %>%
group_by(`Record ID`) %>%
mutate(AuthorNumber = row_number()) %>%  # Ajouter le numéro de l'auteur pour chaque groupe
ungroup()  # Dégroupement pour réinitialiser
# Ajouter la colonne 'FirstLast' : pour premier/dernier auteur, nombre d'auteurs et prénom
rtw_melted <- rtw_melted %>%
group_by(`Record ID`) %>%
mutate(IsFirstLast = if_else(AuthorNumber == 1 | AuthorNumber == max(AuthorNumber), 1, 0),
nb_aut = max(AuthorNumber),
FirstName = if_else(word(Author, 1) == "", Author, word(Author, 1)))
# Utiliser la fonction separate_rows pour séparer les valeurs de la colonne 'Author' en lignes
rtw_melted <- rtw %>%
separate_rows(Author, sep = ";") %>%
group_by(`Record ID`) %>%
mutate(AuthorNumber = row_number()) %>%  # Ajouter le numéro de l'auteur pour chaque groupe
ungroup()  # Dégroupement pour réinitialiser
# Ajouter la colonne 'FirstLast' : pour premier/dernier auteur, nombre d'auteurs et prénom
rtw_melted <- rtw_melted %>%
group_by(`Record ID`) %>%
mutate(IsFirstLast = if_else(AuthorNumber == 1 | AuthorNumber == max(AuthorNumber), 1, 0),
nb_aut = max(AuthorNumber),
FirstName = word(trimws(Author), 1))
View(rtw_melted)
# Ajouter le genre
rtw_melted$FirstName <- tolower(rtw_melted$FirstName)
# Distinct
givenNames <- givenNames %>%
select(gender, given_name, proba) %>%
unique()
# Matching
df_final <- left_join(rtw_melted, givenNames, by = c("FirstName"= "given_name")) # matcher
View(df_final)
# AJOUTER UNE COLONNE POUR INDIQUER SI LES FEMMES SE TROUVENT EN PREMIERE OU DERNIERE POSITION
df_final <- df_final %>%
group_by(`Record ID`) %>%
mutate(woman_leader = case_when(gender == "female" & proba >= 0.6 & IsFirstLast == 1 ~ 1, TRUE ~ 0),
man_leader = case_when(gender == "male" & proba >= 0.6 & IsFirstLast == 1 ~ 1, TRUE ~ 0))
# Généralisation par Record ID :
df_final <- df_final %>%
group_by(`Record ID`) %>%
mutate(woman_leader = ifelse(any(woman_leader == 1), 1, woman_leader),
man_leader = ifelse(any(man_leader == 1), 1, man_leader))
# stats desc juste pour vérif
df_test <- df_final %>%
select(`Record ID`, woman_leader) %>%
unique()
# stats desc juste pour vérif
df_test <- df_final %>%
select(`Record ID`, man_leader) %>%
unique()
# Créer une nouvelle colonne gender_pro_06 en fonction des conditions
df_final$gender_pro_06 <- df_final$gender
# Assigner "initials" pour les cas où gender est NA et FirstName a un seul caractère
df_final$gender_pro_06[is.na(df_final$gender) & nchar(df_final$FirstName) == 1] <- "initials"
# Assigner "undefined" pour les cas où gender est NA et FirstName a plus d'un seul caractère
df_final$gender_pro_06[is.na(df_final$gender) & nchar(df_final$FirstName) > 1] <- "undefined"
# Assigner "unisex" pour les cas où la colonne proba de df_final < 0.6
df_final$gender_pro_06[df_final$proba < 0.6] <- "unisex"
# Assigner "undefined" pour les cas où gender est NA et FirstName a plus d'un seul caractère
df_final$gender_pro_06[is.na(df_final$gender) & nchar(df_final$FirstName) > 1] <- "undefined"
nagender <- df_final %>%
filter(is.na(gender_pro_06))
View(nagender)
View(nagender)
# nagender <- df_final %>%
#   filter(is.na(gender_pro_06))
# Assigner "undefined" pour les cas où l'auteur est NA : 8 cas
df_final$gender_pro_06[is.na(df_final$gender_pro_06)] <- "undefined"
tbfin <- df_final %>%
subset(., gender %not_in% c("initials", "unisex", "undefined"))
# Calcul de la proportion des femmes par publication
###
`%not_in%` <- purrr::negate(`%in%`)
tbfin <- df_final %>%
subset(., gender %not_in% c("initials", "unisex", "undefined"))
tbfin <- df_final %>%
subset(., gender_pro_06 %not_in% c("initials", "unisex", "undefined"))
tbfin <- df_final %>%
subset(., gender_pro_06 %not_in% c("initials", "unisex", "undefined")) %>%
group_by(publication) %>%
summarize(female_part = mean(gender_pro_06 == "female", na.rm = TRUE))
tbfin <- df_final %>%
subset(., gender_pro_06 %not_in% c("initials", "unisex", "undefined")) %>%
group_by(`Record ID`) %>%
summarize(female_part = mean(gender_pro_06 == "female", na.rm = TRUE))
View(tbfin)
View(tbfin)
# Faire une jointure
df_nb_aut <- df_final
df_nb_aut <- merge(df_nb_aut, tbfin, by.x = "`Record ID`", by.y = "`Record ID`", all.x = TRUE)
df_nb_aut <- merge(df_nb_aut, tbfin, by.x = `Record ID`, by.y = `Record ID`, all.x = TRUE)
View(tbfin)
df_nb_aut <- merge(df_nb_aut, tbfin, by.x = "`Record ID`", by.y = "`Record ID`", all.x = TRUE)
View(df_nb_aut)
df_nb_aut <- merge(df_nb_aut, tbfin, by.x = "`Record ID`", by.y = "`Record ID`", all.x = TRUE)
# Renommer la colonne dans df_nb_aut
colnames(df_nb_aut)[colnames(df_nb_aut) == "Record ID"] <- "Record_ID"
# Renommer la colonne dans tbfin
colnames(tbfin)[colnames(tbfin) == "Record ID"] <- "Record_ID"
# Matcher
df_nb_aut <- merge(df_nb_aut, tbfin, by.x = "Record_ID", by.y = "Record_ID", all.x = TRUE)
View(df_nb_aut)
# Ajouter la variable "Gtype"
df_nb_aut$Gtype <- ifelse(df_nb_aut$female_part == 0 & df_nb_aut$nb_aut == 1, "Man alone",
ifelse(df_nb_aut$female_part == 1 & df_nb_aut$nb_aut == 1, "Woman alone",
ifelse(df_nb_aut$female_part == 0 & df_nb_aut$nb_aut > 1, "Collab. men only",
ifelse(df_nb_aut$female_part == 1 & df_nb_aut$nb_aut > 1, "Collab. women only",
ifelse(df_nb_aut$female_part > 0 & df_nb_aut$female_part < 1 & df_nb_aut$nb_aut ==2 & df_nb_aut$woman_leader==1, "Collab. men-women 2 auteurs",
ifelse(df_nb_aut$female_part > 0 & df_nb_aut$female_part < 1 & df_nb_aut$nb_aut > 1 & df_nb_aut$woman_leader==1, "Collab. men-women w lead",
ifelse(df_nb_aut$female_part > 0 & df_nb_aut$female_part < 1 & df_nb_aut$nb_aut > 1 & df_nb_aut$woman_leader==0, "Collab. men-women m lead", NA)
)
)
)
)
)
)
View(df_nb_aut)
View(givenNames)
# Utiliser la fonction separate_rows pour séparer les valeurs de la colonne 'Author' en lignes
rtw_melted <- rtw %>%
separate_rows(Author, sep = ";") %>%
group_by(`Record ID`) %>%
mutate(AuthorNumber = row_number()) %>%  # Ajouter le numéro de l'auteur pour chaque groupe
ungroup()  # Dégroupement pour réinitialiser
# Ajouter la colonne 'FirstLast' : pour premier/dernier auteur, nombre d'auteurs et prénom
rtw_melted <- rtw_melted %>%
group_by(`Record ID`) %>%
mutate(IsFirstLast = if_else(AuthorNumber == 1 | AuthorNumber == max(AuthorNumber), 1, 0),
nb_aut = max(AuthorNumber),
FirstName = word(trimws(Author), 1))
# Utiliser la fonction separate_rows pour séparer les valeurs de la colonne 'Author' en lignes
rtw_melted <- rtw %>%
separate_rows(Author, sep = ";") %>%
group_by(`Record ID`) %>%
mutate(AuthorNumber = row_number()) %>%  # Ajouter le numéro de l'auteur pour chaque groupe
ungroup()  # Dégroupement pour réinitialiser
# Ajouter la colonne 'FirstLast' : pour premier/dernier auteur, nombre d'auteurs et prénom
rtw_melted <- rtw_melted %>%
group_by(`Record ID`) %>%
mutate(IsFirstLast = if_else(AuthorNumber == 1 | AuthorNumber == max(AuthorNumber), 1, 0),
nb_aut = max(AuthorNumber),
FirstName = word(trimws(Author), 1))
# Supprimer la partie qui vient après le tiret quand il y en a
rtw_melted$FirstName <- sub("-.*", "", rtw_melted$FirstName)
# minuscule
rtw_melted$FirstName <- tolower(rtw_melted$FirstName)
# Distinct
givenNames <- givenNames %>%
select(gender, given_name, proba) %>%
unique()
# Matching
df_final <- left_join(rtw_melted, givenNames, by = c("FirstName"= "given_name")) # matcher
# AJOUTER UNE COLONNE POUR INDIQUER SI LES FEMMES SE TROUVENT EN PREMIERE OU DERNIERE POSITION
df_final <- df_final %>%
group_by(`Record ID`) %>%
mutate(woman_leader = case_when(gender == "female" & proba >= 0.6 & IsFirstLast == 1 ~ 1, TRUE ~ 0),
man_leader = case_when(gender == "male" & proba >= 0.6 & IsFirstLast == 1 ~ 1, TRUE ~ 0))
# Généralisation par Record ID :
df_final <- df_final %>%
group_by(`Record ID`) %>%
mutate(woman_leader = ifelse(any(woman_leader == 1), 1, woman_leader),
man_leader = ifelse(any(man_leader == 1), 1, man_leader))
# stats desc juste pour vérif
df_test <- df_final %>%
select(`Record ID`, woman_leader) %>%
unique()
# stats desc juste pour vérif
df_test <- df_final %>%
select(`Record ID`, man_leader) %>%
unique()
# Créer une nouvelle colonne gender_pro_06 en fonction des conditions
df_final$gender_pro_06 <- df_final$gender
# Assigner "initials" pour les cas où gender est NA et FirstName a un seul caractère
df_final$gender_pro_06[is.na(df_final$gender) & nchar(df_final$FirstName) == 1] <- "initials"
# Assigner "undefined" pour les cas où gender est NA et FirstName a plus d'un seul caractère
df_final$gender_pro_06[is.na(df_final$gender) & nchar(df_final$FirstName) > 1] <- "undefined"
# Assigner "unisex" pour les cas où la colonne proba de df_final < 0.6
df_final$gender_pro_06[df_final$proba < 0.6] <- "unisex"
# nagender <- df_final %>%
#   filter(is.na(gender_pro_06))
# Assigner "undefined" pour les cas où l'auteur est NA : 8 cas
df_final$gender_pro_06[is.na(df_final$gender_pro_06)] <- "undefined"
# Calcul de la proportion des femmes par publication
###
`%not_in%` <- purrr::negate(`%in%`)
tbfin <- df_final %>%
subset(., gender_pro_06 %not_in% c("initials", "unisex", "undefined")) %>%
group_by(`Record ID`) %>%
summarize(female_part = mean(gender_pro_06 == "female", na.rm = TRUE))
# Faire une jointure
df_nb_aut <- df_final
# Renommer la colonne dans df_nb_aut
colnames(df_nb_aut)[colnames(df_nb_aut) == "Record ID"] <- "Record_ID"
# Renommer la colonne dans tbfin
colnames(tbfin)[colnames(tbfin) == "Record ID"] <- "Record_ID"
# Matcher
df_nb_aut <- merge(df_nb_aut, tbfin, by.x = "Record_ID", by.y = "Record_ID", all.x = TRUE)
# Ajouter la variable "Gtype"
df_nb_aut$Gtype <- ifelse(df_nb_aut$female_part == 0 & df_nb_aut$nb_aut == 1, "Man alone",
ifelse(df_nb_aut$female_part == 1 & df_nb_aut$nb_aut == 1, "Woman alone",
ifelse(df_nb_aut$female_part == 0 & df_nb_aut$nb_aut > 1, "Collab. men only",
ifelse(df_nb_aut$female_part == 1 & df_nb_aut$nb_aut > 1, "Collab. women only",
ifelse(df_nb_aut$female_part > 0 & df_nb_aut$female_part < 1 & df_nb_aut$nb_aut ==2 & df_nb_aut$woman_leader==1, "Collab. men-women 2 auteurs",
ifelse(df_nb_aut$female_part > 0 & df_nb_aut$female_part < 1 & df_nb_aut$nb_aut > 1 & df_nb_aut$woman_leader==1, "Collab. men-women w lead",
ifelse(df_nb_aut$female_part > 0 & df_nb_aut$female_part < 1 & df_nb_aut$nb_aut > 1 & df_nb_aut$woman_leader==0, "Collab. men-women m lead", NA)
)
)
)
)
)
)
####################################
df_retract <- read_excel("/Users/maddi/Documents/Pubpeer Gender/df_gender_retract.xlsx") ## bdd sur le genre + bdd retractations (version avril 2023)
View(df_retract)
retract_pubpeer <- df_retract %>%
select(publication, is_retracted) %>%
unique()
describe(retract_pubpeer$is_retracted)
retract_pubpeer <- df_retract %>%
filter(!is.na(Gtype2)) %>%
select(publication, is_retracted) %>%
unique()
describe(retract_pubpeer$is_retracted)
####################################
# Ajouter une autre variable sur le répartition du type de collab. H F.
##
# cela consiste à :
# dupliquer la colonne Gtype en Gtype2, en modifiant les modalités selon ces conditions :
# pour les valeurs de Gtype différentes de : ("Woman alone", "Man alone", "Collab. men only", "Collab. women only"),
# si w_corresp=1, Gtype2="Collab. men-women . w corr", si m_corresp=1, Gtype2="Collab. men-women . m corr"
# Ajouter le flag femme auteur de correspondance (proxy : 1er auteur)
df_nb_aut <- df_nb_aut %>%
mutate(w_corresp = ifelse(AuthorNumber == 1 & g_prob_06 == "female", 1, 0))
View(df_nb_aut)
####################################
# Ajouter une autre variable sur le répartition du type de collab. H F.
##
# cela consiste à :
# dupliquer la colonne Gtype en Gtype2, en modifiant les modalités selon ces conditions :
# pour les valeurs de Gtype différentes de : ("Woman alone", "Man alone", "Collab. men only", "Collab. women only"),
# si w_corresp=1, Gtype2="Collab. men-women . w corr", si m_corresp=1, Gtype2="Collab. men-women . m corr"
# Ajouter le flag femme auteur de correspondance (proxy : 1er auteur)
df_nb_aut <- df_nb_aut %>%
mutate(w_corresp = ifelse(AuthorNumber == 1 & gender_pro_06 == "female", 1, 0))
# Ajouter le flag homme auteur de correspondance (proxy : 1er auteur)
df_nb_aut <- df_nb_aut %>%
mutate(m_corresp = ifelse(AuthorNumber == 1 & gender_pro_06 == "male", 1, 0))
##
df_nb_aut <- df_nb_aut %>%
group_by(publication) %>%
mutate(w_corresp = ifelse(any(w_corresp == 1), 1, w_corresp),
m_corresp = ifelse(any(m_corresp == 1), 1, m_corresp))
##
df_nb_aut <- df_nb_aut %>%
group_by(Record_ID) %>%
mutate(w_corresp = ifelse(any(w_corresp == 1), 1, w_corresp),
m_corresp = ifelse(any(m_corresp == 1), 1, m_corresp))
##
# Ajouter la variable "Gtype"
df_nb_aut$Gtype2 <- ifelse(df_nb_aut$female_part == 0 & df_nb_aut$nb_aut == 1, "Man alone",
ifelse(df_nb_aut$female_part == 1 & df_nb_aut$nb_aut == 1, "Woman alone",
ifelse(df_nb_aut$female_part == 0 & df_nb_aut$nb_aut > 1, "Collab. men only",
ifelse(df_nb_aut$female_part == 1 & df_nb_aut$nb_aut > 1, "Collab. women only",
ifelse(df_nb_aut$female_part > 0 & df_nb_aut$female_part < 1 & df_nb_aut$nb_aut > 1 & df_nb_aut$w_corresp==1, "Collab. men-women w lead",
ifelse(df_nb_aut$female_part > 0 & df_nb_aut$female_part < 1 & df_nb_aut$nb_aut > 1 & df_nb_aut$m_corresp==1, "Collab. men-women m lead",
NA)
)
)
)
)
)
View(df_nb_aut)
View(df_retract)
View(df_nb_aut)
retract_pubpeer <- df_retract %>%
filter(!is.na(Gtype2)) %>%
select(.$ID_retractionwatch, is_retracted) %>%
unique()
retract_pubpeer <- df_retract %>%
filter(!is.na(Gtype2)) %>%
select(ID_retractionwatch, is_retracted) %>%
unique()
describe(retract_pubpeer$is_retracted)
retract_pubpeer <- df_retract %>%
filter(!is.na(Gtype2)) %>%
select(RetractionDate, is_retracted) %>%
unique()
describe(retract_pubpeer$is_retracted)
retract_pubpeer <- df_retract %>%
filter(!is.na(Gtype2)) %>%
select(publication, ID_retractionwatch, is_retracted) %>%
unique()
describe(retract_pubpeer$is_retracted)
retract_pubpeer <- df_retract %>%
filter(!is.na(Gtype2)) %>%
select(publication, is_retracted) %>%
unique()
describe(retract_pubpeer$is_retracted)
retract_pubpeer <- df_retract %>%
filter(!is.na(Gtype2) & is.na(ID_retractionwatch) & is_retracted == 1) %>%
unique()
retract_pubpeer <- df_retract %>%
filter(is.na(ID_retractionwatch) & is_retracted == 1) %>%
unique()
is.na(ID_retractionwatch) &
retract_pubpeer <- df_retract %>%
filter(is_retracted == 1) %>%
unique()
retract_pubpeer <- df_retract %>%
filter(is_retracted == 1) %>%
unique()
View(retract_pubpeer)
retract_pubpeer <- df_retract %>%
filter(is_retracted == 1) %>%
select(publication, ID_retractionwatch)
retract_pubpeer <- df_retract %>%
filter(is_retracted == 1) %>%
select(publication, ID_retractionwatch) %>%
unique()
View(retract_pubpeer)
retract_pubpeer <- df_retract %>%
filter(is_retracted == 1 $ !is.na(Gtype2)) %>%
retract_pubpeer <- df_retract %>%
filter(is_retracted == 1 & !is.na(Gtype2)) %>%
select(publication, ID_retractionwatch) %>%
unique()
View(retract_pubpeer)
retract_pubpeer <- df_retract %>%
filter(is_retracted == 1 & !is.na(Gtype2)) %>%
select(ID_retractionwatch) %>%
unique()
retract_pubpeer <- df_retract %>%
filter(is_retracted == 1 & !is.na(Gtype2)) %>%
select(publication, ID_retractionwatch) %>%
unique()
n_distinct(retract_pubpeer$ID_retractionwatch)
####################################
# Ajouter une colonne in_pubpeer
df_nb_aut <- df_nb_aut %>%
mutate(in_pubpeer = ifelse(Record_ID %in% retract_pubpeer$ID_retractionwatch, 1, 0))
View(df_nb_aut)
describe(df_nb_aut$in_pubpeer)
verif <- df_nb_aut %>%
select(Record_ID, in_pubpeer) %>%
unique() %>%
describe(.$in_pubpeer)
verif <- df_nb_aut %>%
select(Record_ID, in_pubpeer) %>%
unique()
describe(verif$in_pubpeer)
View(df_retract)
df_retract2 <- read_excel("/Users/maddi/Documents/Pubpeer Gender/retraction_data.xlsx")
View(df_retract2)
retract_pubpeer <- df_retract %>%
filter(is_retracted == 1 & !is.na(Gtype2)) %>%
select(publication, ID_retractionwatch) %>%
unique() %>%
merge(., df_retract2, by = "publication")
View(retract_pubpeer)
####################################
# Ajouter une colonne in_pubpeer
df_nb_aut <- df_nb_aut %>%
mutate(in_pubpeer = ifelse(Record_ID %in% retract_pubpeer$ID_retractionwatch, 1, 0),
retract_before_pubpeer = ifelse(Record_ID %in% retract_pubpeer$ID_retractionwatch & retract_pubpeer$sum_nb_com_after_retract = retract_pubpeer$sum_nb_comm, 1, 0))
####################################
# Ajouter une colonne in_pubpeer
df_nb_aut <- df_nb_aut %>%
mutate(in_pubpeer = ifelse(Record_ID %in% retract_pubpeer$ID_retractionwatch, 1, 0),
retract_before_pubpeer = ifelse(Record_ID %in% retract_pubpeer$ID_retractionwatch & (retract_pubpeer$sum_nb_com_after_retract = retract_pubpeer$sum_nb_comm), 1, 0))
####################################
# Ajouter une colonne in_pubpeer
df_nb_aut <- df_nb_aut %>%
mutate(in_pubpeer = ifelse(Record_ID %in% retract_pubpeer$ID_retractionwatch, 1, 0),
retract_before_pubpeer = ifelse(Record_ID %in% retract_pubpeer$ID_retractionwatch & (retract_pubpeer$sum_nb_com_after_retract == retract_pubpeer$sum_nb_comm), 1, 0))
####################################
# Ajouter une colonne in_pubpeer
df_nb_aut <- df_nb_aut %>%
mutate(in_pubpeer = ifelse(Record_ID %in% retract_pubpeer$ID_retractionwatch, 1, 0),
retract_before_pubpeer = ifelse(Record_ID %in% retract_pubpeer$ID_retractionwatch & retract_pubpeer$sum_nb_com_after_retract == retract_pubpeer$sum_nb_comm, 1, 0))
####################################
# Ajouter une colonne in_pubpeer
df_nb_aut <- df_nb_aut %>%
mutate(
in_pubpeer = ifelse(Record_ID %in% retract_pubpeer$ID_retractionwatch, 1, 0),
retract_before_pubpeer = ifelse(
Record_ID == retract_pubpeer$ID_retractionwatch & retract_pubpeer$sum_nb_com_after_retract == retract_pubpeer$sum_nb_comm,
1,
0
)
)
####################################
# Ajouter une colonne in_pubpeer
df_nb_aut <- df_nb_aut %>%
mutate(in_pubpeer = ifelse(Record_ID %in% retract_pubpeer$ID_retractionwatch, 1, 0))
####################################
# Est retractée avant qu'elle soit commentée dans Pubpeer
df_nb_aut <- df_nb_aut %>%
left_join(retract_pubpeer, by = c("Record_ID" = "ID_retractionwatch")) %>%
mutate(
in_pubpeer = ifelse(!is.na(ID_retractionwatch), 1, 0),
retract_before_pubpeer = ifelse(!is.na(ID_retractionwatch) & sum_nb_com_after_retract == sum_nb_comm, 1, 0)
) %>%
select(-ID_retractionwatch, -sum_nb_com_after_retract, -sum_nb_comm)
df_nb_aut <- df_nb_aut %>%
left_join(retract_pubpeer, by = c("Record_ID" = "ID_retractionwatch"))
####################################
# Est retractée avant qu'elle soit commentée dans Pubpeer
df_nb_aut <- df_nb_aut %>%
left_join(retract_pubpeer, by = c("Record_ID" = "ID_retractionwatch")) %>%
mutate(retract_before_pubpeer = ifelse(!is.na(ID_retractionwatch) & sum_nb_com_after_retract == sum_nb_comm, 1, 0))
# Faire une jointure
df_nb_aut <- df_final
# Renommer la colonne dans df_nb_aut
colnames(df_nb_aut)[colnames(df_nb_aut) == "Record ID"] <- "Record_ID"
# Renommer la colonne dans tbfin
colnames(tbfin)[colnames(tbfin) == "Record ID"] <- "Record_ID"
# Matcher
df_nb_aut <- merge(df_nb_aut, tbfin, by.x = "Record_ID", by.y = "Record_ID", all.x = TRUE)
# Ajouter la variable "Gtype"
df_nb_aut$Gtype <- ifelse(df_nb_aut$female_part == 0 & df_nb_aut$nb_aut == 1, "Man alone",
ifelse(df_nb_aut$female_part == 1 & df_nb_aut$nb_aut == 1, "Woman alone",
ifelse(df_nb_aut$female_part == 0 & df_nb_aut$nb_aut > 1, "Collab. men only",
ifelse(df_nb_aut$female_part == 1 & df_nb_aut$nb_aut > 1, "Collab. women only",
ifelse(df_nb_aut$female_part > 0 & df_nb_aut$female_part < 1 & df_nb_aut$nb_aut ==2 & df_nb_aut$woman_leader==1, "Collab. men-women 2 auteurs",
ifelse(df_nb_aut$female_part > 0 & df_nb_aut$female_part < 1 & df_nb_aut$nb_aut > 1 & df_nb_aut$woman_leader==1, "Collab. men-women w lead",
ifelse(df_nb_aut$female_part > 0 & df_nb_aut$female_part < 1 & df_nb_aut$nb_aut > 1 & df_nb_aut$woman_leader==0, "Collab. men-women m lead", NA)
)
)
)
)
)
)
####################################
# Ajouter une autre variable sur le répartition du type de collab. H F.
##
# cela consiste à :
# dupliquer la colonne Gtype en Gtype2, en modifiant les modalités selon ces conditions :
# pour les valeurs de Gtype différentes de : ("Woman alone", "Man alone", "Collab. men only", "Collab. women only"),
# si w_corresp=1, Gtype2="Collab. men-women . w corr", si m_corresp=1, Gtype2="Collab. men-women . m corr"
# Ajouter le flag femme auteur de correspondance (proxy : 1er auteur)
df_nb_aut <- df_nb_aut %>%
mutate(w_corresp = ifelse(AuthorNumber == 1 & gender_pro_06 == "female", 1, 0))
# Ajouter le flag homme auteur de correspondance (proxy : 1er auteur)
df_nb_aut <- df_nb_aut %>%
mutate(m_corresp = ifelse(AuthorNumber == 1 & gender_pro_06 == "male", 1, 0))
##
df_nb_aut <- df_nb_aut %>%
group_by(Record_ID) %>%
mutate(w_corresp = ifelse(any(w_corresp == 1), 1, w_corresp),
m_corresp = ifelse(any(m_corresp == 1), 1, m_corresp))
##
# Ajouter la variable "Gtype"
df_nb_aut$Gtype2 <- ifelse(df_nb_aut$female_part == 0 & df_nb_aut$nb_aut == 1, "Man alone",
ifelse(df_nb_aut$female_part == 1 & df_nb_aut$nb_aut == 1, "Woman alone",
ifelse(df_nb_aut$female_part == 0 & df_nb_aut$nb_aut > 1, "Collab. men only",
ifelse(df_nb_aut$female_part == 1 & df_nb_aut$nb_aut > 1, "Collab. women only",
ifelse(df_nb_aut$female_part > 0 & df_nb_aut$female_part < 1 & df_nb_aut$nb_aut > 1 & df_nb_aut$w_corresp==1, "Collab. men-women w lead",
ifelse(df_nb_aut$female_part > 0 & df_nb_aut$female_part < 1 & df_nb_aut$nb_aut > 1 & df_nb_aut$m_corresp==1, "Collab. men-women m lead",
NA)
)
)
)
)
)
####################################
df_retract <- read_excel("/Users/maddi/Documents/Pubpeer Gender/df_gender_retract.xlsx") ## bdd sur le genre + bdd retractations (version avril 2023)
df_retract2 <- read_excel("/Users/maddi/Documents/Pubpeer Gender/retraction_data.xlsx")
retract_pubpeer <- df_retract %>%
filter(is_retracted == 1 & !is.na(Gtype2)) %>%
select(publication, ID_retractionwatch) %>%
unique() %>%
merge(., df_retract2, by = "publication")
describe(retract_pubpeer$is_retracted)
####################################
# Ajouter une colonne in_pubpeer
df_nb_aut <- df_nb_aut %>%
mutate(in_pubpeer = ifelse(Record_ID %in% retract_pubpeer$ID_retractionwatch, 1, 0))
verif <- df_nb_aut %>%
select(Record_ID, in_pubpeer) %>%
unique()
View(df_nb_aut)
describe(verif$in_pubpeer)
####################################
# Est retractée avant qu'elle soit commentée dans Pubpeer
df_nb_aut <- df_nb_aut %>%
left_join(retract_pubpeer, by = c("Record_ID" = "ID_retractionwatch"))
View(df_nb_aut)
####################################
# Est retractée avant qu'elle soit commentée dans Pubpeer
df_nb_aut <- df_nb_aut %>%
left_join(retract_pubpeer, by = c("Record_ID" = "ID_retractionwatch")) %>%
mutate(retract_before_pubpeer = ifelse(!is.na(ID_retractionwatch) & !is.na(sum_nb_com_after_retract) == !is.na(sum_nb_comm), 1, 0))
####################################
# Est retractée avant qu'elle soit commentée dans Pubpeer
df_nb_aut <- df_nb_aut %>%
left_join(retract_pubpeer, by = c("Record_ID" = "ID_retractionwatch")) %>%
mutate(retract_before_pubpeer = ifelse(in_pubpeer == 1 & sum_nb_com_after_retract == sum_nb_comm, 1, 0))
####################################
# Est retractée avant qu'elle soit commentée dans Pubpeer
df_nb_aut <- df_nb_aut %>%
left_join(retract_pubpeer, by = c("Record_ID" = "ID_retractionwatch")) %>%
mutate(retract_before_pubpeer = ifelse(.$in_pubpeer == 1 & .$sum_nb_com_after_retract == .$sum_nb_comm, 1, 0))
df_nb_aut <- df_nb_aut %>%
mutate(retract_before_pubpeer = ifelse(is.na(sum_nb_com_after_retract) & is.na(sum_nb_comm) | sum_nb_com_after_retract == sum_nb_comm, 1, 0))
View(df_nb_aut)
retractionwatch_gender <- write.xlsx(df_nb_aut, "/Users/maddi/Documents/Pubpeer Gender/retraction_data.xlsx")
describe(df_nb_aut$Subject)
