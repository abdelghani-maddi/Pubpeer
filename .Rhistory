names(df_unnested)[names(df_unnested) == "Auteurs_extraits"] <- "Auteur"
# Supprimer les guillemets simples des noms d'auteurs
df_unnested$Auteur <- gsub("'", "", df_unnested$Auteur)
# Extraire le prénom de chaque nom d'auteur
df_unnested$prenoms <- sapply(strsplit(df_unnested$Auteur, " "), function(x) x[1])
# Prédire le genre pour chaque prénom
df_unnested$genre <- sapply(df_unnested$prenoms, function(x) gender(x)$gender)
View(df_unnested)
View(df_unnested)
# Installer et charger le package genderGuessr
install.packages("genderGuessr")
library(genderGuessr)
## Utiliser un autre package "genderGuessr"
# Fonction pour prédire le genre à partir d'un prénom
predict_gender <- function(name) {
gender_guess(name)$gender
}
# Appliquer la fonction à la colonne Auteurs pour prédire le genre de chaque auteur
df_unnested$genre2 <- sapply(df_unnested$prenoms, function(names) sapply(strsplit(names, ", "), function(name) predict_gender(name[2])))
predict_gender <- function(name) {
gender_guess(name)$gender
}
library(genderGuessr)
install.packages("GenderInfer")
library(GenderInfer)
## Utiliser un autre package "genderGuessr"
df_unnested$genre2 <- infer_gender(df_unnested$prenoms)
library(GenderInfer)
## Utiliser un autre package "genderGuessr"
df_unnested$genre2 <- infer_gender(df_unnested$prenoms)
authors_df <- assign_gender(data_df = authors, first_name_col = "prenoms")
df_unnested <- assign_gender(data_df = authors, first_name_col = "prenoms")
df_unnested <- assign_gender(data_df = df_unnested, first_name_col = "prenoms")
View(df_unnested)
df_unnested <- assign_gender(data_df = df_unnested, first_name_col = "Auteur")
View(df_unnested)
df_unnested <- assign_gender(data_df = authors, first_name_col = "prenoms")
df_unnested$genre2 <- assign_gender(df_unnested$prenoms)
df_unnested <- assign_gender(df_unnested$prenoms)
df_unnested <- assign_gender(data_df = authors, first_name_col = "prenoms")
describe(df_unnested$genre)
# Exemple de données avec une colonne "prenoms" contenant les prénoms
authors <- data.frame(prenoms = c("Yi", "Phil", "David", "Lisa", "Emily"))
# Prédire le genre avec assign_gender
authors$genre <- assign_gender(data_df = authors, first_name_col = "prenoms")
# Afficher le résultat
print(authors)
df_unnested$genre2 <- assign_gender(data_df = authors, first_name_col = "prenoms")
authors <- df_unnested$prenoms
# Prédire le genre avec assign_gender
authors$genre <- assign_gender(data_df = authors, first_name_col = "prenoms")
authors <- data.frame(prenoms = df_unnested$prenoms)
# Prédire le genre avec assign_gender
authors$genre <- assign_gender(data_df = authors, first_name_col = "prenoms")
View(authors)
authors <- data.frame(prenoms = df_unnested$prenoms, genre_package1 = df_unnested$genre)
authors <- data.frame(prenoms = df_unnested$prenoms,
genre_package1 = df_unnested$genre)
df_unnested$genre
df_unnested$prenoms
authors <- data.frame(prenoms = df_unnested$prenoms,
publication = df_unnested$publication)
# Prédire le genre avec assign_gender
authors$genre <- assign_gender(data_df = authors, first_name_col = "prenoms")
View(authors)
authors <- data.frame(prenoms = df_unnested$prenoms)
# Prédire le genre avec assign_gender
authors$genre <- assign_gender(data_df = authors, first_name_col = "prenoms")
View(authors)
# Prédire le genre avec assign_gender
authors <- assign_gender(data_df = authors, first_name_col = "prenoms")
View(authors)
authors <- data.frame(prenoms = df_unnested$prenoms)
# Prédire le genre avec assign_gender
authors <- assign_gender(data_df = authors, first_name_col = "prenoms")
View(authors)
authors <- data.frame( publication = df_unnested$publication,
prenoms = df_unnested$prenoms)
# Prédire le genre avec assign_gender
authors <- assign_gender(data_df = authors, first_name_col = "prenoms")
View(authors)
unlist(df_unnested$genre)
genre_pkg1 <- unlist(df_unnested$genre)
genre_pkg1 <- as.character(df_unnested$genre)
genre_pkg1
authors$gender_pkg1 <- genre_pkg1
View(authors)
# Pivoter les noms des auteurs par autant de lignes que d'auteurs et dupliquer l'identifiant "publication"
df_unnested <- df %>%
mutate(Auteurs_extraits = str_extract_all(Auteurs, "'([A-Z][a-z]+\\s)+([A-Z][a-z]+)'")) %>%
unnest(Auteurs_extraits)
# Renommer la nouvelle colonne "Auteurs"
names(df_unnested)[names(df_unnested) == "Auteurs_extraits"] <- "Auteur"
# Supprimer les guillemets simples des noms d'auteurs
df_unnested$Auteur <- gsub("'", "", df_unnested$Auteur)
# Extraire le prénom de chaque nom d'auteur
df_unnested$prenoms <- sapply(strsplit(df_unnested$Auteur, " "), function(x) x[1])
# Prédire le genre pour chaque prénom
df_unnested$genre <- sapply(df_unnested$prenoms, function(x) gender(x)$gender)
# Exemple de données avec une colonne "prenoms" contenant les prénoms
authors <- data.frame( publication = df_unnested$publication,
prenoms = df_unnested$prenoms)
# Prédire le genre avec assign_gender
authors <- assign_gender(data_df = authors, first_name_col = "prenoms")
View(authors)
describe(authors$gender)
# Pivoter les noms des auteurs par autant de lignes que d'auteurs et dupliquer l'identifiant "publication"
df_unnested <- df %>%
mutate(Auteurs_extraits = str_extract_all(Auteurs, "'([A-Z][a-z]+\\s)+([A-Z][a-z]+)'"),
Pays_extraits = str_extract_all(Pays_institution, "'([A-Z][a-z]+\\s)+([A-Z][a-z]+)'")) %>%
unnest(Auteurs_extraits, Pays_extraits)
install.packages("genderBR")
devtools::install_github("kalimu/genderizeR")
library(genderizeR)
df_unnested <- df %>%
mutate(Pays_extraits = str_extract_all(Pays_institution, "'([A-Z][a-z]+\\s)+([A-Z][a-z]+)'")) %>%
unnest(Pays_extraits)
View(df)
View(df_unnested)
# Pivoter les noms des auteurs par autant de lignes que d'auteurs et dupliquer l'identifiant "publication"
df_unnested <- df %>%
mutate(Auteurs_extraits = str_extract_all(Auteurs, "'([A-Z][a-z]+\\s)+([A-Z][a-z]+)'")) %>%
unnest(Auteurs_extraits)
View(df_unnested)
# Renommer la nouvelle colonne "Auteurs"
names(df_unnested)[names(df_unnested) == "Auteurs_extraits"] <- "Auteur"
# Supprimer les guillemets simples des noms d'auteurs
df_unnested$Auteur <- gsub("'", "", df_unnested$Auteur)
df_unnested <- df_unnested %>%
mutate(Pays_extraits = str_extract_all(Pays_institution, "'([A-Z][a-z]+\\s)+([A-Z][a-z]+)'")) %>%
unnest(Pays_extraits)
# Pivoter les noms des auteurs par autant de lignes que d'auteurs et dupliquer l'identifiant "publication"
df_unnested <- df %>%
mutate(Auteurs_extraits = str_extract_all(Auteurs, "'([A-Z][a-z]+\\s)+([A-Z][a-z]+)'")) %>%
unnest(Auteurs_extraits)
# Renommer la nouvelle colonne "Auteurs"
names(df_unnested)[names(df_unnested) == "Auteurs_extraits"] <- "Auteur"
# Supprimer les guillemets simples des noms d'auteurs
df_unnested$Auteur <- gsub("'", "", df_unnested$Auteur)
View(df_unnested)
View(df)
# Pivoter les noms des auteurs par autant de lignes que d'auteurs et dupliquer l'identifiant "publication"
df_unnested <- df %>%
mutate(Auteurs_extraits = str_extract_all(Auteurs, "'([A-Z][a-z]+\\s)+([A-Z][a-z]+)'")) %>%
unnest(Auteurs_extraits)
# Renommer la nouvelle colonne "Auteurs"
names(df_unnested)[names(df_unnested) == "Auteurs_extraits"] <- "Auteur"
# Supprimer les guillemets simples des noms d'auteurs
df_unnested$Auteur <- gsub("'", "", df_unnested$Auteur)
View(df)
View(df_unnested)
# Fonction pour extraire le prénom d'un nom qui contient des initiales
extract_first_name <- function(name) {
# Diviser le nom en parties séparées par un espace
name_parts <- strsplit(name, " ")[[1]]
# Parcourir les parties pour trouver la première partie qui ne contient pas de points
for (part in name_parts) {
if (!grepl("\\.", part)) {
return(part)
}
}
# Si toutes les parties contiennent des points, retourner le dernier
return(name_parts[length(name_parts)])
}
extract_first_name(df$Auteurs)
df$Auteurs
# Extraire les pays en utilisant la fonction str_extract_all
df_unnested_pays <- df_unnested %>%
mutate(Pays_extraits = str_extract_all(Pays_institution, "'([A-Z]{2})'")) %>%
unnest(Pays_extraits)
View(df_unnested_pays)
# Pivoter les noms des auteurs par autant de lignes que d'auteurs et dupliquer l'identifiant "publication"
df_unnested <- df %>%
mutate(Auteurs_extraits = str_extract_all(Auteurs, "'([A-Z][a-z]+\\s)+([A-Z][a-z]+)'"),
Pays_extraits = str_extract_all(Pays_institution, "'([A-Z]{2})'")) %>%
unnest(Auteurs_extraits, Pays_extraits)
# Extraire les pays en utilisant la fonction str_extract_all
df_unnested_pays <- df %>%
mutate(Pays_extraits = str_extract_all(Pays_institution, "'([A-Z]{2})'")) %>%
unnest(Pays_extraits)
View(df_unnested_pays)
# Pivoter les noms des auteurs par autant de lignes que d'auteurs et dupliquer l'identifiant "publication"
df_unnested <- df_unnested_pays %>%
mutate(Auteurs_extraits = str_extract_all(Auteurs, "'([A-Z][a-z]+\\s)+([A-Z][a-z]+)'")) %>%
unnest(Auteurs_extraits)
# Renommer la nouvelle colonne "Auteurs"
names(df_unnested)[names(df_unnested) == "Auteurs_extraits"] <- "Auteur"
View(df_unnested)
# Extraire les noms des auteurs
df_unnested <- df %>%
mutate(Auteurs_extraits = str_extract_all(Auteurs, "'([A-Z][a-z]+\\s)+([A-Z][a-z]+)'")) %>%
unnest(Auteurs_extraits)
# Extraire les codes de pays correspondants pour chaque auteur
df_unnested <- df_unnested %>%
mutate(Pays_extraits = str_extract_all(Pays_institution, "'[A-Z]{2}'")) %>%
unnest(Pays_extraits)
View(df_unnested)
# Charger les packages nécessaires
library(dplyr)
library(tidyr)
library(stringr)
library(genderizeR)
# Créer un exemple de dataframe
df <- data.frame(
Publication = c("A", "B", "C"),
Auteurs = c("['David Matthew Doyle', 'Lisa Molix']", "['John Doe', 'Jane Doe']", "['Bob Smith']"),
Pays_institution = c("['US', 'GB']", "['US', 'US']", "['CA']")
)
# Extraire les noms des auteurs
df_unnested <- df %>%
mutate(
Auteurs = str_replace_all(Auteurs, "[\\[\\]']", ""), # Enlever les crochets et les apostrophes
Auteurs = strsplit(Auteurs, ",\\s+"), # Séparer les noms des auteurs en utilisant la virgule suivie d'un espace comme séparateur
Pays_institution = str_replace_all(Pays_institution, "[\\[\\]']", ""),
Pays_institution = strsplit(Pays_institution, ",\\s+")
) %>%
unnest(cols = c(Auteurs, Pays_institution)) %>% # Transformer la colonne "Auteurs" en lignes
rename(Auteur = Auteurs, Pays = Pays_institution) # Renommer les colonnes
# Assigner le genre des auteurs en utilisant leur prénom et leur pays
df_genderized <- genderize_df(df_unnested, "Auteur", "Pays")
View(df_unnested)
### Extraction colonnes d'intérêt et suppression des autres données
df <- data_pub %>%
select(publication, Auteurs, Pays_institution, `Nombre de commentaires`, Année, starts_with("Journal"))
# Extraire les noms des auteurs
df_unnested <- df %>%
mutate(
Auteurs = str_replace_all(Auteurs, "[\\[\\]']", ""), # Enlever les crochets et les apostrophes
Auteurs = strsplit(Auteurs, ",\\s+"), # Séparer les noms des auteurs en utilisant la virgule suivie d'un espace comme séparateur
Pays_institution = str_replace_all(Pays_institution, "[\\[\\]']", ""),
Pays_institution = strsplit(Pays_institution, ",\\s+")
) %>%
unnest(cols = c(Auteurs, Pays_institution)) %>% # Transformer la colonne "Auteurs" en lignes
rename(Auteur = Auteurs, Pays = Pays_institution) # Renommer les colonnes
# Extraction des auteurs
df_unnested <- df %>%
mutate(Auteurs_extraits = str_extract_all(Auteurs, "'([A-Z][a-z]+\\s)+([A-Z][a-z]+)'")) %>%
unnest(Auteurs_extraits)
# Décomposition de la colonne "Pays_institution"
pays <- df %>%
mutate(Pays_institution = str_extract_all(Pays_institution, "'[A-Z]{2}'")) %>%
unnest(Pays_institution)
# Jointure avec la table des auteurs
df_pays <- df_unnested %>%
left_join(pays, by = c("id_publication", "Auteur" = "auteurs"))
# Jointure avec la table des auteurs
df_pays <- df_unnested %>%
left_join(pays, by = c("publication", "Auteur" = "auteurs"))
View(pays)
# Jointure avec la table des auteurs
df_pays <- df_unnested %>%
left_join(pays, by = c("publication", "Auteur"))
# Jointure avec la table des auteurs
df_pays <- df_unnested %>%
left_join(pays, by = c("publication", "Auteurs"))
View(df_pays)
# Jointure avec la table des auteurs
df_pays <- df_unnested %>%
left_join(pays, by = c("publication"))
View(df_pays)
View(df)
View(pays)
View(df_unnested)
View(df)
# Extraction des auteurs
df_unnested <- df %>%
mutate(Auteurs_extraits = str_extract_all(Auteurs, "([A-Z][a-z]+\\s)+([A-Z][a-z]+)")) %>%
unnest(Auteurs_extraits)
View(df_unnested)
View(df_unnested)
# Extraction des auteurs
df_unnested <- df %>%
mutate(Auteurs_extraits = str_extract_all(Auteurs, "'(([A-Z][a-z]+\\s)+[A-Z][a-z]+(-[a-z]+)?)+(?=\'|$)")) %>%
unnest(Auteurs_extraits)
View(df_unnested)
df_unnested <- df %>%
mutate(Auteurs_extraits = str_extract_all(Auteurs, "'([\\p{L}\\s-]*)'")) %>%
unnest(Auteurs_extraits) %>%
select(-Auteurs)
View(df_unnested)
# Jointure avec la table des auteurs
df_pays <- df_unnested %>%
left_join(pays, by = c("publication"))
# Décomposition de la colonne "Pays_institution"
pays <- df %>%
mutate(Pays_institution = str_extract_all(Pays_institution, "'[A-Z]{2}'")) %>%
unnest(Pays_institution)
# Supprimer les guillemets simples des noms d'auteurs
df_unnested$Auteur <- gsub("'", "", df_unnested$Auteur)
# Extraire le prénom de chaque nom d'auteur
df_unnested$prenoms <- sapply(strsplit(df_unnested$Auteur, " "), function(x) x[1])
df_unnested <- df %>%
mutate(Pays_extraits = str_split(Pays_institution, ", ")) %>%
unnest(Pays_extraits) %>%
mutate(Pays_extraits = str_remove(Pays_extraits, "['|\"]"))
View(df_unnested)
df_pays <- df %>%
mutate(Pays_extraits = str_split(Pays_institution, ", ")) %>%
unnest(Pays_extraits) %>%
mutate(Pays_extraits = str_remove(Pays_extraits, "['|\"]"))
# Extraction des auteurs
df_unnested <- df %>%
mutate(Auteurs_extraits = str_extract_all(Auteurs, "'([\\p{L}\\s-]*)'")) %>%
unnest(Auteurs_extraits) %>%
select(-Auteurs)
df_pays <- df %>%
mutate(Pays_extraits = str_split(Pays_institution, ", ")) %>%
unnest(Pays_extraits) %>%
mutate(Pays_extraits = str_remove(Pays_extraits, "['|\"]"))
View(pays)
View(df_pays)
df$Pays_institution <- ifelse(authors$Pays_institution == "None", "UNK", authors$Pays_institution)
df$Pays_institution <- ifelse(df$Pays_institution == "None", "UNK", df$Pays_institution)
df_pays <- df %>%
mutate(Pays_extraits = str_split(Pays_institution, ", ")) %>%
unnest(Pays_extraits) %>%
mutate(Pays_extraits = str_remove(Pays_extraits, "['|\"]"))
names(df_unnested)[names(df_unnested) == "Pays_extraits"] <- "Pays"
View(df_pays)
# Enlever les espaces et caractères spéciaux
df_pays$Pays_extraits <- gsub("[^A-Z]+", "", df_pays$Pays_extraits)
View(df_pays)
describe(df$Pays_institution)
# Extraire le prénom de chaque nom d'auteur
df_unnested$prenoms <- sapply(strsplit(df_unnested$Auteur, " "), function(x) x[1])
View(df_unnested)
# Renommer la nouvelle colonne "Auteurs"
names(df_unnested)[names(df_unnested) == "Auteurs_extraits"] <- "Auteur"
# Supprimer les guillemets simples des noms d'auteurs
df_unnested$Auteur <- gsub("'", "", df_unnested$Auteur)
View(df_unnested)
# Extraire le prénom de chaque nom d'auteur
df_unnested$prenoms <- sapply(strsplit(df_unnested$Auteur, " "), function(x) x[1])
# Exemple de données avec une colonne "prenoms" contenant les prénoms
authors <- data.frame( publication = df_unnested$publication,
prenoms = df_unnested$prenoms)
# Prédire le genre avec assign_gender
authors <- assign_gender(data_df = authors, first_name_col = "prenoms")
describe(authors$gender)
df_genderized <- genderize_df(df_unnested, "Auteur")
library(genderizeR)
authors <- genderize(authors$prenoms)$gender
authors2 <- genderize(authors$prenoms)$gender
authors$genre <- genderize(authors$prenoms)$gender
# Exemple de données
authorsss <- data.frame(prenoms = c("John", "Mary", "Joseph", "Sarah"))
# Assignation du genre à chaque auteur
authorsss$genre <- genderize(authors$prenoms)$gender
library(genderizeR)
View(df_unnested)
givenNames = findGivenNames(df_unnested$Auteur, progress = FALSE)
View(givenNames)
givenNames = givenNames[count > 100]
givenNames = givenNames[count > 0.5]
givenNames = givenNames[count > 0.5]
givenNames = givenNames[count > 0]
givenNames = findGivenNames(df_unnested$Auteur, progress = FALSE)
givenNames = findGivenNames(df_unnested$Auteur, progress = FALSE, apikey = '0005346dd6d511911a5c214026f97992')
View(givenNames)
describe(givenNames$gender)
# Genderize the original character vector
genderize(df_unnested, genderDB = givenNames, progress = FALSE)
View(df_unnested)
write.xlsx(givenNames, "D:/bdd/gender_proba.xlsx")
library(data.table)
write.xlsx(givenNames, "D:/bdd/gender_proba.xlsx")
library(openxlsx)
write.xlsx(givenNames, "D:/bdd/gender_proba.xlsx")
# Genderize the original character vector
a <- genderize(df_unnested$prenoms, genderDB = givenNames, progress = FALSE)
View(givenNames)
df_unnested$Auteur
df_unnested$Auteur[1:10]
genderDB = findGivenNames(df_unnested$Auteur[1:10], progress = FALSE, apikey = '0005346dd6d511911a5c214026f97992')
View(genderDB)
x <- df_unnested$Auteur[1:10]
x <- df_unnested$Auteur[1:10]
genderDB = findGivenNames(x, progress = FALSE, apikey = '0005346dd6d511911a5c214026f97992')
View(genderDB)
x <- df_unnested$prenoms[1:10]
x
genderDB = findGivenNames(x, progress = FALSE, apikey = '0005346dd6d511911a5c214026f97992')
View(genderDB)
x <- df_unnested$Auteur[1:10]
genderDB = findGivenNames(x, progress = FALSE, apikey = '0005346dd6d511911a5c214026f97992')
View(genderDB)
genderize(x, genderDB = givenNamesDB, progress = FALSE)
givenNamesDB = findGivenNames(x, progress = FALSE, apikey = '0005346dd6d511911a5c214026f97992')
genderize(x, genderDB = givenNamesDB, progress = FALSE)
x <- df_unnested$Auteur[1:10]
givenNamesDB = findGivenNames(x, progress = FALSE, apikey = '0005346dd6d511911a5c214026f97992')
genderize(x, genderDB = givenNamesDB, progress = FALSE)
View(genderDB)
View(genderDB)
View(genderDB)
View(df)
View(df_unnested)
textPrepare(x)
givenNamesDB = findGivenNames(x, progress = FALSE, apikey = '0005346dd6d511911a5c214026f97992')
View(genderDB)
textPrepare(x)
x <- c("ana", "leone", "ma", "pascual")
textPrepare(x)
givenNamesDB = findGivenNames(x, progress = FALSE, apikey = '0005346dd6d511911a5c214026f97992')
View(givenNamesDB)
?textPrepare
View(givenNames)
names(givenNames) <- c("id", "gender", "given_name", "proba", "country_id")
View(givenNames)
write.xlsx(givenNames, "D:/bdd/gender_proba.xlsx")
View(df_unnested)
# matcher
df_unnested$Auteur
# matcher
df_unnested$prenoms
# matcher
df_unnested$prenoms <- tolower(df_unnested$prenoms)
df_unnested$prenoms
givenNames <- givenNames %>%
unique()
View(givenNames)
View(givenNames)
df_final <- merge(df_unnested, givenNames, by.x = "prenom", by.y = "given_name", all.x = TRUE)
df_final <- merge(df_unnested, givenNames, by.x = "prenoms", by.y = "given_name", all.x = TRUE)
View(df_final)
describe(df_final$gender)
df$gender[df$gender == 0.5] <- "unisex"
givenNames <- givenNames %>%
unique()
df_final <- merge(df_unnested, givenNames, by.x = "prenoms", by.y = "given_name", all.x = TRUE)
df$gender[df$gender == 0.5] <- "unisex"
df_final$gender[df_final$gender == 0.5] <- "unisex"
describe(df_final$gender)
df_final$gender[df_final$gender == "0.5"] <- "unisex"
describe(df_final$gender)
df_final$gender[df_final$gender == "0.5"]
df_final$gender == "0.5"
# matcher
df_unnested$prenoms <- tolower(df_unnested$prenoms)
givenNames <- givenNames %>%
unique()
df_final <- merge(df_unnested, givenNames, by.x = "prenoms", by.y = "given_name", all.x = TRUE)
df_final$gender[df_final$proba == 0.5] <- "unisex"
describe(df_final$gender)
df_final$gender[df_final$proba < 0.6] <- "unisex"
describe(df_final$gender)
df$gender[is.na(df$gender)] <- "initials" # modifier les "NA" de gender en "initials"
df_final$gender[is.na(df_final$gender)] <- "initials" # modifier les "NA" de gender en "initials"
describe(df_final$gender)
tb <- df_final %>%
select(publication, gender, `Nombre de commentaires`, Année, starts_with("Journal"))
View(tb)
## Analyse des données ----
`%not_in%` <- purrr::negate(`%in%`)
tb <- df_final %>%
select(publication, gender, `Nombre de commentaires`, Année, starts_with("Journal")) %>%
subset(., gender %not_in% c("initials", "unisex"))
write.xlsx(givenNames, "D:/bdd/tb_finale.xlsx")
tb %>%
group_by(publication) %>%
summarize(female_part = mean(gender == "female", na.rm = TRUE))
tb2 %>%
group_by(publication) %>%
summarize(female_part = mean(gender == "female", na.rm = TRUE))
tbfin <- tb %>%
group_by(publication) %>%
summarize(female_part = mean(gender == "female", na.rm = TRUE))
View(tbfin)
tb %>%
group_by(publication) %>%
summarize(female_part = mean(gender == "female", na.rm = TRUE)) %>%
select(-gender) %>%
left_join(tb, by = "publication")
tb <- df_final %>%
select(publication, gender, `Nombre de commentaires`, Année, starts_with("Journal")) %>%
group_by(publication) %>%
summarize(female_part = mean(gender == "female", na.rm = TRUE)) %>%
select(-gender) %>%
left_join(tb, by = "publication")
tb <- df_final %>%
select(publication, gender, `Nombre de commentaires`, Année, starts_with("Journal")) %>%
group_by(publication) %>%
summarize(female_part = mean(gender == "female", na.rm = TRUE))
View(tb)
tb <- df_final %>%
select(publication, gender, `Nombre de commentaires`, Année, starts_with("Journal")) %>%
subset(., gender %not_in% c("initials", "unisex"))
# faire une jointure
tb_final <- merge(tb, tbfin, by.x = "publication", by.y = "publication", all.x = TRUE) # matcher
View(tb_final)
# faire une jointure
tb_final <- merge(tb, tbfin, by.x = "publication", by.y = "publication", all.x = TRUE) %>% # matcher
select(-gender)
View(tb_final)
# faire une jointure
tb_final <- merge(tb, tbfin, by.x = "publication", by.y = "publication", all.x = TRUE) %>% # matcher
select(-gender) %>%
unique()
View(tb_final)
esquisse:::esquisser()
write.xlsx(tb_final, "D:/bdd/tb_finale.xlsx")
mean(tb_final$female_part)
questionr:::icut()
esquisse:::esquisser()
tb_ech <- tb_final[tb_final$`Nombre de commentaires`>1]
tb_ech <- subset(tb_final, tb_final$`Nombre de commentaires`>1)
esquisse:::esquisser()
tb_ech %>% tbl_summary(
include = c(`Nombre de commentaires`, female_part)
)
questionr:::icut()
summary(tb_final$female_part)
