serVis(json_lda, out.dir = output_dir, open.browser = FALSE)
# Créer la visualisation LDAvis et sauvegarder le fichier HTML dans le répertoire spécifié
serVis(json_lda, out.dir = output_dir, open.browser = T)
library(httpuv)
startServer("127.0.0.1", 8080, list(
call = function(req) {
list(
status = 200,
headers = list(
"Content-Type" = "text/html"
),
body = readLines("D:/Projets/Pubpeer/LDAvis/index.html")
)
}
))
serVis(json_lda, out.dir = output_dir, open.browser = FALSE)
serVis(json_lda, out.dir = output_dir, open.browser = FALSE)
serVis(json_lda, out.dir = output_dir, open.browser = FALSE)
serVis(json_lda, out.dir = output_dir, open.browser = T)
serVis(json_lda, out.dir = output_dir, open.browser = T)
library(jsonlite)
library(stringi)
# Chemins des fichiers
input_dir <- "LDAvis"
output_file <- "LDAvis/index2.html"
# Lire le fichier index.html
index_html <- readLines(file.path(input_dir, "index.html"))
# Supprimer les inclusions des fichiers externes (d3.v3.js, ldavis.js, lda.css)
index_html[6:8] <- ""
# Insérer le script d3.v3.js en ligne dans le HTML
d3_v3_js <- readLines(file.path(input_dir, "d3.v3.js"))
d3_v3_js <- append(d3_v3_js, "<script>", 0)
d3_v3_js <- append(d3_v3_js, "</script>")
index_html <- append(index_html, d3_v3_js, 6)
# Lire et formater lda.json en une seule chaîne de caractères
lda_json <- fromJSON(file.path(input_dir, "lda.json"))
lda_json <- toJSON(lda_json)
lda_json <- stri_escape_unicode(lda_json)
# Insérer le contenu de lda.json dans ldavis.js et insérer ldavis.js en ligne dans le HTML
ldavis_js <- readLines(file.path(input_dir, "ldavis.js"))
ldavis_js[95] <- sprintf('    data = JSON.parse("%s");', lda_json)
ldavis_js[1357] <- ""
ldavis_js <- append(ldavis_js, "<script>", 0)
ldavis_js <- append(ldavis_js, "</script>")
index_html <- append(index_html, ldavis_js, 7 + length(d3_v3_js))
# Insérer le CSS (lda.css) en ligne dans le HTML
lda_css <- readLines(file.path(input_dir, "lda.css"), warn = FALSE)
lda_css <- append(lda_css, "<style>", 0)
lda_css <- append(lda_css, "</style>")
index_html <- append(index_html, lda_css, 8 + length(d3_v3_js) + length(ldavis_js))
# Écrire le fichier HTML autonome
writeLines(index_html, output_file)
# Chemins des fichiers
input_dir <- "D:/Pubpeer/LDAvis"
output_file <- "LDAvis/index2.html"
# Lire le fichier index.html
index_html <- readLines(file.path(input_dir, "index.html"))
# Supprimer les inclusions des fichiers externes (d3.v3.js, ldavis.js, lda.css)
index_html[6:8] <- ""
# Insérer le script d3.v3.js en ligne dans le HTML
d3_v3_js <- readLines(file.path(input_dir, "d3.v3.js"))
d3_v3_js <- append(d3_v3_js, "<script>", 0)
d3_v3_js <- append(d3_v3_js, "</script>")
index_html <- append(index_html, d3_v3_js, 6)
# Lire et formater lda.json en une seule chaîne de caractères
lda_json <- fromJSON(file.path(input_dir, "lda.json"))
lda_json <- toJSON(lda_json)
lda_json <- stri_escape_unicode(lda_json)
# Insérer le contenu de lda.json dans ldavis.js et insérer ldavis.js en ligne dans le HTML
ldavis_js <- readLines(file.path(input_dir, "ldavis.js"))
ldavis_js[95] <- sprintf('    data = JSON.parse("%s");', lda_json)
ldavis_js[1357] <- ""
ldavis_js <- append(ldavis_js, "<script>", 0)
ldavis_js <- append(ldavis_js, "</script>")
index_html <- append(index_html, ldavis_js, 7 + length(d3_v3_js))
# Insérer le CSS (lda.css) en ligne dans le HTML
lda_css <- readLines(file.path(input_dir, "lda.css"), warn = FALSE)
lda_css <- append(lda_css, "<style>", 0)
lda_css <- append(lda_css, "</style>")
index_html <- append(index_html, lda_css, 8 + length(d3_v3_js) + length(ldavis_js))
# Écrire le fichier HTML autonome
writeLines(index_html, output_file)
# Chemins des fichiers
input_dir <- "D:/Pubpeer/LDAvis"
output_file <- "D:/Pubpeer/LDAvis/index2.html"
# Lire le fichier index.html
index_html <- readLines(file.path(input_dir, "index.html"))
# Supprimer les inclusions des fichiers externes (d3.v3.js, ldavis.js, lda.css)
index_html[6:8] <- ""
# Insérer le script d3.v3.js en ligne dans le HTML
d3_v3_js <- readLines(file.path(input_dir, "d3.v3.js"))
d3_v3_js <- append(d3_v3_js, "<script>", 0)
d3_v3_js <- append(d3_v3_js, "</script>")
index_html <- append(index_html, d3_v3_js, 6)
# Lire et formater lda.json en une seule chaîne de caractères
lda_json <- fromJSON(file.path(input_dir, "lda.json"))
lda_json <- toJSON(lda_json)
lda_json <- stri_escape_unicode(lda_json)
# Insérer le contenu de lda.json dans ldavis.js et insérer ldavis.js en ligne dans le HTML
ldavis_js <- readLines(file.path(input_dir, "ldavis.js"))
ldavis_js[95] <- sprintf('    data = JSON.parse("%s");', lda_json)
ldavis_js[1357] <- ""
ldavis_js <- append(ldavis_js, "<script>", 0)
ldavis_js <- append(ldavis_js, "</script>")
index_html <- append(index_html, ldavis_js, 7 + length(d3_v3_js))
# Insérer le CSS (lda.css) en ligne dans le HTML
lda_css <- readLines(file.path(input_dir, "lda.css"), warn = FALSE)
lda_css <- append(lda_css, "<style>", 0)
lda_css <- append(lda_css, "</style>")
index_html <- append(index_html, lda_css, 8 + length(d3_v3_js) + length(ldavis_js))
# Écrire le fichier HTML autonome
writeLines(index_html, output_file)
ir <- "D:/Pubpeer"
output_file <- "D:/Pubpeer/index2.html"
# Lire le fichier index.html
index_html <- readLines(file.path(input_dir, "index.html"))
# Supprimer les inclusions des fichiers externes (d3.v3.js, ldavis.js, lda.css)
index_html[6:8] <- ""
# Insérer le script d3.v3.js en ligne dans le HTML
d3_v3_js <- readLines(file.path(input_dir, "d3.v3.js"))
d3_v3_js <- append(d3_v3_js, "<script>", 0)
d3_v3_js <- append(d3_v3_js, "</script>")
index_html <- append(index_html, d3_v3_js, 6)
# Lire et formater lda.json en une seule chaîne de caractères
lda_json <- fromJSON(file.path(input_dir, "lda.json"))
lda_json <- toJSON(lda_json)
lda_json <- stri_escape_unicode(lda_json)
# Insérer le contenu de lda.json dans ldavis.js et insérer ldavis.js en ligne dans le HTML
ldavis_js <- readLines(file.path(input_dir, "ldavis.js"))
ldavis_js[95] <- sprintf('    data = JSON.parse("%s");', lda_json)
ldavis_js[1357] <- ""
ldavis_js <- append(ldavis_js, "<script>", 0)
ldavis_js <- append(ldavis_js, "</script>")
index_html <- append(index_html, ldavis_js, 7 + length(d3_v3_js))
# Insérer le CSS (lda.css) en ligne dans le HTML
lda_css <- readLines(file.path(input_dir, "lda.css"), warn = FALSE)
lda_css <- append(lda_css, "<style>", 0)
lda_css <- append(lda_css, "</style>")
index_html <- append(index_html, lda_css, 8 + length(d3_v3_js) + length(ldavis_js))
# Écrire le fichier HTML autonome
writeLines(index_html, output_file)
ut_dir <- "D:/Pubpeer"
output_file <- "D:/Pubpeer/ldavis.html"
# Lire le fichier index.html
index_html <- readLines(file.path(input_dir, "index.html"))
bpeer"
output_file <- "D:/Pubpeer/index2.html"
input_dir <- "D:/Pubpeer"
output_file <- "D:/Pubpeer/index2.html"
# Lire le fichier index.html
index_html <- readLines(file.path(input_dir, "index.html"))
# Chemins des fichiers
input_dir <- "D:/Pubpeer"
output_file <- "D:/Pubpeer/index2.html"
# Lire le fichier index.html
index_html <- readLines(file.path(input_dir, "index2.html"))
# Supprimer les inclusions des fichiers externes (d3.v3.js, ldavis.js, lda.css)
index_html[6:8] <- ""
# Insérer le script d3.v3.js en ligne dans le HTML
d3_v3_js <- readLines(file.path(input_dir, "d3.v3.js"))
d3_v3_js <- append(d3_v3_js, "<script>", 0)
d3_v3_js <- append(d3_v3_js, "</script>")
index_html <- append(index_html, d3_v3_js, 6)
# Lire et formater lda.json en une seule chaîne de caractères
lda_json <- fromJSON(file.path(input_dir, "lda.json"))
lda_json <- toJSON(lda_json)
lda_json <- stri_escape_unicode(lda_json)
# Créer la visualisation LDAvis et sauvegarder le fichier HTML dans le répertoire spécifié
serVis(json_lda, out.dir = output_dir, open.browser = )
library(jsonlite)
library(stringi)
# Chemins des fichiers
input_dir <- "D:/Pubpeer"
output_file <- "D:/Pubpeer/index2.html"
# Lire le fichier index.html
index_html <- readLines(file.path(input_dir, "index2.html"))
# Supprimer les inclusions des fichiers externes (d3.v3.js, ldavis.js, lda.css)
index_html[6:8] <- ""
# Insérer le script d3.v3.js en ligne dans le HTML
d3_v3_js <- readLines(file.path(input_dir, "d3.v3.js"))
d3_v3_js <- append(d3_v3_js, "<script>", 0)
# Chemins des fichiers
input_dir <- "D:Pubpeer/LDAvis/"
output_file <- "D:/Pubpeer/LDAvis/index2.html"
# Lire le fichier index.html
index_html <- readLines(file.path(input_dir, "index2.html"))
# Supprimer les inclusions des fichiers externes (d3.v3.js, ldavis.js, lda.css)
index_html[6:8] <- ""
# Insérer le script d3.v3.js en ligne dans le HTML
d3_v3_js <- readLines(file.path(input_dir, "d3.v3.js"))
d3_v3_js <- append(d3_v3_js, "<script>", 0)
d3_v3_js <- append(d3_v3_js, "</script>")
index_html <- append(index_html, d3_v3_js, 6)
# Lire et formater lda.json en une seule chaîne de caractères
lda_json <- fromJSON(file.path(input_dir, "lda.json"))
lda_json <- toJSON(lda_json)
# Chemins des fichiers
input_dir <- "D:/Pubpeer/LDAvis/"
output_file <- "D:/Pubpeer/LDAvis/index2.html"
# Lire le fichier index.html
index_html <- readLines(file.path(input_dir, "index2.html"))
# Chemins des fichiers
input_dir <- "D:/Pubpeer/LDAvis/"
output_file <- "D:/Pubpeer/LDAvis/index2.html"
# Lire le fichier index.html
index_html <- readLines(file.path(input_dir, "index.html"))
# Supprimer les inclusions des fichiers externes (d3.v3.js, ldavis.js, lda.css)
index_html[6:8] <- ""
# Insérer le script d3.v3.js en ligne dans le HTML
d3_v3_js <- readLines(file.path(input_dir, "d3.v3.js"))
d3_v3_js <- append(d3_v3_js, "<script>", 0)
d3_v3_js <- append(d3_v3_js, "</script>")
index_html <- append(index_html, d3_v3_js, 6)
# Lire et formater lda.json en une seule chaîne de caractères
lda_json <- fromJSON(file.path(input_dir, "lda.json"))
lda_json <- toJSON(lda_json)
lda_json <- stri_escape_unicode(lda_json)
# Insérer le contenu de lda.json dans ldavis.js et insérer ldavis.js en ligne dans le HTML
ldavis_js <- readLines(file.path(input_dir, "ldavis.js"))
ldavis_js[95] <- sprintf('    data = JSON.parse("%s");', lda_json)
ldavis_js[1357] <- ""
ldavis_js <- append(ldavis_js, "<script>", 0)
ldavis_js <- append(ldavis_js, "</script>")
index_html <- append(index_html, ldavis_js, 7 + length(d3_v3_js))
# Insérer le CSS (lda.css) en ligne dans le HTML
lda_css <- readLines(file.path(input_dir, "lda.css"), warn = FALSE)
lda_css <- append(lda_css, "<style>", 0)
lda_css <- append(lda_css, "</style>")
index_html <- append(index_html, lda_css, 8 + length(d3_v3_js) + length(ldavis_js))
# Écrire le fichier HTML autonome
writeLines(index_html, output_file)
output_file <- "D:/Pubpeer/index2.html"
# Lire le fichier index.html
index_html <- readLines(file.path(input_dir, "index.html"))
# Supprimer les inclusions des fichiers externes (d3.v3.js, ldavis.js, lda.css)
index_html[6:8] <- ""
# Insérer le script d3.v3.js en ligne dans le HTML
d3_v3_js <- readLines(file.path(input_dir, "d3.v3.js"))
d3_v3_js <- append(d3_v3_js, "<script>", 0)
d3_v3_js <- append(d3_v3_js, "</script>")
index_html <- append(index_html, d3_v3_js, 6)
# Lire et formater lda.json en une seule chaîne de caractères
lda_json <- fromJSON(file.path(input_dir, "lda.json"))
lda_json <- toJSON(lda_json)
lda_json <- stri_escape_unicode(lda_json)
# Insérer le contenu de lda.json dans ldavis.js et insérer ldavis.js en ligne dans le HTML
ldavis_js <- readLines(file.path(input_dir, "ldavis.js"))
ldavis_js[95] <- sprintf('    data = JSON.parse("%s");', lda_json)
ldavis_js[1357] <- ""
ldavis_js <- append(ldavis_js, "<script>", 0)
ldavis_js <- append(ldavis_js, "</script>")
index_html <- append(index_html, ldavis_js, 7 + length(d3_v3_js))
# Insérer le CSS (lda.css) en ligne dans le HTML
lda_css <- readLines(file.path(input_dir, "lda.css"), warn = FALSE)
lda_css <- append(lda_css, "<style>", 0)
lda_css <- append(lda_css, "</style>")
index_html <- append(index_html, lda_css, 8 + length(d3_v3_js) + length(ldavis_js))
# Écrire le fichier HTML autonome
writeLines(index_html, output_file)
output_file <- "D:/Pubpeer/ldavis.html"
# Lire le fichier index.html
index_html <- readLines(file.path(input_dir, "index.html"))
# Supprimer les inclusions des fichiers externes (d3.v3.js, ldavis.js, lda.css)
index_html[6:8] <- ""
# Insérer le script d3.v3.js en ligne dans le HTML
d3_v3_js <- readLines(file.path(input_dir, "d3.v3.js"))
d3_v3_js <- append(d3_v3_js, "<script>", 0)
d3_v3_js <- append(d3_v3_js, "</script>")
index_html <- append(index_html, d3_v3_js, 6)
# Lire et formater lda.json en une seule chaîne de caractères
lda_json <- fromJSON(file.path(input_dir, "lda.json"))
lda_json <- toJSON(lda_json)
lda_json <- stri_escape_unicode(lda_json)
# Insérer le contenu de lda.json dans ldavis.js et insérer ldavis.js en ligne dans le HTML
ldavis_js <- readLines(file.path(input_dir, "ldavis.js"))
ldavis_js[95] <- sprintf('    data = JSON.parse("%s");', lda_json)
ldavis_js[1357] <- ""
ldavis_js <- append(ldavis_js, "<script>", 0)
ldavis_js <- append(ldavis_js, "</script>")
index_html <- append(index_html, ldavis_js, 7 + length(d3_v3_js))
# Insérer le CSS (lda.css) en ligne dans le HTML
lda_css <- readLines(file.path(input_dir, "lda.css"), warn = FALSE)
lda_css <- append(lda_css, "<style>", 0)
lda_css <- append(lda_css, "</style>")
index_html <- append(index_html, lda_css, 8 + length(d3_v3_js) + length(ldavis_js))
# Écrire le fichier HTML autonome
writeLines(index_html, output_file)
###############################
install.packages("rmarkdown")
# Génération des nuages de mots
cloud(lda_json,
topic = 10,                  # Nombre de sujets à afficher
max.words = 250,              # Limite de mots affichés par nuage
scale = c(2, 0.5),           # Taille maximale et minimale des mots
colors = my_colors,          # Palette de couleurs pour les mots
random.order = FALSE,        # Les mots les plus fréquents sont affichés en premier
random.color = FALSE,        # Les couleurs sont attribuées par fréquence
rot.per = 0.2)               # Pourcentage de mots en rotation verticale
# Génération des nuages de mots
cloud(lda_fit,
topic = 10,                  # Nombre de sujets à afficher
max.words = 250,              # Limite de mots affichés par nuage
scale = c(2, 0.5),           # Taille maximale et minimale des mots
colors = my_colors,          # Palette de couleurs pour les mots
random.order = FALSE,        # Les mots les plus fréquents sont affichés en premier
random.color = FALSE,        # Les couleurs sont attribuées par fréquence
rot.per = 0.2)               # Pourcentage de mots en rotation verticale
# Génération des nuages de mots
cloud(fit,
topic = 10,                  # Nombre de sujets à afficher
max.words = 250,              # Limite de mots affichés par nuage
scale = c(2, 0.5),           # Taille maximale et minimale des mots
colors = my_colors,          # Palette de couleurs pour les mots
random.order = FALSE,        # Les mots les plus fréquents sont affichés en premier
random.color = FALSE,        # Les couleurs sont attribuées par fréquence
rot.per = 0.2)               # Pourcentage de mots en rotation verticale
# Ajuster les marges pour réduire l'espace entre les graphiques
par(mfrow = c(1, 1),            # Disposition en grille 3x3
mar = c(0.5, 0, 0.5, 0),    # Marges autour de chaque graphique (bas, gauche, haut, droite)
oma = c(0, 0, 0, 0),        # Marges extérieures (bas, gauche, haut, droite)
mgp = c(3, 1, 0),           # Position des axes (ne pas trop les modifier ici)
xpd = NA,                   # Permet de dessiner en dehors de la région des marges
mai = c(0.1, 0.1, 0.1, 0.1) # Taille des marges (bas, gauche, haut, droite)
)
# Palette de couleurs personnalisée
my_colors <- brewer.pal(8, "Dark2")  # Choisissez une palette de couleurs esthétiques
# Génération des nuages de mots
cloud(fit,
topic = 10,                  # Nombre de sujets à afficher
max.words = 250,              # Limite de mots affichés par nuage
scale = c(2, 0.5),           # Taille maximale et minimale des mots
colors = my_colors,          # Palette de couleurs pour les mots
random.order = FALSE,        # Les mots les plus fréquents sont affichés en premier
random.color = FALSE,        # Les couleurs sont attribuées par fréquence
rot.per = 0.2)               # Pourcentage de mots en rotation verticale
# Ajuster les marges pour réduire l'espace entre les graphiques
par(mfrow = c(1, 1),            # Disposition en grille 3x3
mar = c(0.1, 0, 0.1, 0),    # Marges autour de chaque graphique (bas, gauche, haut, droite)
oma = c(0, 0, 0, 0),        # Marges extérieures (bas, gauche, haut, droite)
mgp = c(3, 1, 0),           # Position des axes (ne pas trop les modifier ici)
xpd = NA,                   # Permet de dessiner en dehors de la région des marges
mai = c(0.1, 0.1, 0.1, 0.1) # Taille des marges (bas, gauche, haut, droite)
)
# Palette de couleurs personnalisée
my_colors <- brewer.pal(8, "Dark2")  # Choisissez une palette de couleurs esthétiques
# Génération des nuages de mots
cloud(fit,
topic = 10,                  # Nombre de sujets à afficher
max.words = 250,              # Limite de mots affichés par nuage
scale = c(2, 0.5),           # Taille maximale et minimale des mots
colors = my_colors,          # Palette de couleurs pour les mots
random.order = FALSE,        # Les mots les plus fréquents sont affichés en premier
random.color = FALSE,        # Les couleurs sont attribuées par fréquence
rot.per = 0.2)               # Pourcentage de mots en rotation verticale
# Génération des nuages de mots
cloud(fit,
topic = 1,                  # Nombre de sujets à afficher
max.words = 250,              # Limite de mots affichés par nuage
scale = c(2, 0.5),           # Taille maximale et minimale des mots
colors = my_colors,          # Palette de couleurs pour les mots
random.order = FALSE,        # Les mots les plus fréquents sont affichés en premier
random.color = FALSE,        # Les couleurs sont attribuées par fréquence
rot.per = 0.2)               # Pourcentage de mots en rotation verticale
# Ajuster les marges pour réduire l'espace entre les graphiques
par(mfrow = c(1, 1),            # Disposition en grille 3x3
mar = c(0.1, 0, 0.1, 0),    # Marges autour de chaque graphique (bas, gauche, haut, droite)
oma = c(0, 0, 0, 0),        # Marges extérieures (bas, gauche, haut, droite)
mgp = c(3, 1, 0),           # Position des axes (ne pas trop les modifier ici)
xpd = NA,                   # Permet de dessiner en dehors de la région des marges
mai = c(0.1, 0.1, 0.1, 0.1) # Taille des marges (bas, gauche, haut, droite)
)
# Palette de couleurs personnalisée
my_colors <- brewer.pal(8, "Dark2")  # Choisissez une palette de couleurs esthétiques
# Génération des nuages de mots
cloud(fit,
topic = 1,                  # Nombre de sujets à afficher
max.words = 250,              # Limite de mots affichés par nuage
scale = c(2, 0.5),           # Taille maximale et minimale des mots
colors = my_colors,          # Palette de couleurs pour les mots
random.order = FALSE,        # Les mots les plus fréquents sont affichés en premier
random.color = FALSE,        # Les couleurs sont attribuées par fréquence
rot.per = 0.2)               # Pourcentage de mots en rotation verticale
# Génération des nuages de mots
cloud(fit,
topic = 5,                  # Nombre de sujets à afficher
max.words = 250,              # Limite de mots affichés par nuage
scale = c(2, 0.5),           # Taille maximale et minimale des mots
colors = my_colors,          # Palette de couleurs pour les mots
random.order = FALSE,        # Les mots les plus fréquents sont affichés en premier
random.color = FALSE,        # Les couleurs sont attribuées par fréquence
rot.per = 0.2)               # Pourcentage de mots en rotation verticale
# Génération des nuages de mots
cloud(fit,
topic = 1,                  # Nombre de sujets à afficher
max.words = 250,              # Limite de mots affichés par nuage
scale = c(2, 0.5),           # Taille maximale et minimale des mots
colors = my_colors,          # Palette de couleurs pour les mots
random.order = FALSE,        # Les mots les plus fréquents sont affichés en premier
random.color = FALSE,        # Les couleurs sont attribuées par fréquence
rot.per = 0.2)               # Pourcentage de mots en rotation verticale
# Génération des nuages de mots
cloud(fit,
topic = 1,                  # Nombre de sujets à afficher
max.words = 300,              # Limite de mots affichés par nuage
scale = c(2, 0.5),           # Taille maximale et minimale des mots
colors = my_colors,          # Palette de couleurs pour les mots
random.order = FALSE,        # Les mots les plus fréquents sont affichés en premier
random.color = FALSE,        # Les couleurs sont attribuées par fréquence
rot.per = 0.2)               # Pourcentage de mots en rotation verticale
# Génération des nuages de mots
cloud(fit,
topic = 2,                  # Nombre de sujets à afficher
max.words = 300,              # Limite de mots affichés par nuage
scale = c(2, 0.5),           # Taille maximale et minimale des mots
colors = my_colors,          # Palette de couleurs pour les mots
random.order = FALSE,        # Les mots les plus fréquents sont affichés en premier
random.color = FALSE,        # Les couleurs sont attribuées par fréquence
rot.per = 0.2)               # Pourcentage de mots en rotation verticale
# Génération des nuages de mots
cloud(fit,
topic = 3,                  # Nombre de sujets à afficher
max.words = 300,              # Limite de mots affichés par nuage
scale = c(2, 0.5),           # Taille maximale et minimale des mots
colors = my_colors,          # Palette de couleurs pour les mots
random.order = FALSE,        # Les mots les plus fréquents sont affichés en premier
random.color = FALSE,        # Les couleurs sont attribuées par fréquence
rot.per = 0.2)               # Pourcentage de mots en rotation verticale
# Génération des nuages de mots
cloud(fit,
topic = 3,                  # Nombre de sujets à afficher
max.words = 250,              # Limite de mots affichés par nuage
scale = c(2, 0.5),           # Taille maximale et minimale des mots
colors = my_colors,          # Palette de couleurs pour les mots
random.order = FALSE,        # Les mots les plus fréquents sont affichés en premier
random.color = FALSE,        # Les couleurs sont attribuées par fréquence
rot.per = 0.2)               # Pourcentage de mots en rotation verticale
# Génération des nuages de mots
cloud(fit,
topic = 3,                  # Nombre de sujets à afficher
max.words = 300,              # Limite de mots affichés par nuage
scale = c(2, 0.5),           # Taille maximale et minimale des mots
colors = my_colors,          # Palette de couleurs pour les mots
random.order = FALSE,        # Les mots les plus fréquents sont affichés en premier
random.color = FALSE,        # Les couleurs sont attribuées par fréquence
rot.per = 0.2)               # Pourcentage de mots en rotation verticale
# Génération des nuages de mots
cloud(fit,
topic = 4,                  # Nombre de sujets à afficher
max.words = 300,              # Limite de mots affichés par nuage
scale = c(2, 0.5),           # Taille maximale et minimale des mots
colors = my_colors,          # Palette de couleurs pour les mots
random.order = FALSE,        # Les mots les plus fréquents sont affichés en premier
random.color = FALSE,        # Les couleurs sont attribuées par fréquence
rot.per = 0.2)               # Pourcentage de mots en rotation verticale
# Génération des nuages de mots
cloud(fit,
topic = 5,                  # Nombre de sujets à afficher
max.words = 300,              # Limite de mots affichés par nuage
scale = c(2, 0.5),           # Taille maximale et minimale des mots
colors = my_colors,          # Palette de couleurs pour les mots
random.order = FALSE,        # Les mots les plus fréquents sont affichés en premier
random.color = FALSE,        # Les couleurs sont attribuées par fréquence
rot.per = 0.2)               # Pourcentage de mots en rotation verticale
# Génération des nuages de mots
cloud(fit,
topic = 6,                  # Nombre de sujets à afficher
max.words = 300,              # Limite de mots affichés par nuage
scale = c(2, 0.5),           # Taille maximale et minimale des mots
colors = my_colors,          # Palette de couleurs pour les mots
random.order = FALSE,        # Les mots les plus fréquents sont affichés en premier
random.color = FALSE,        # Les couleurs sont attribuées par fréquence
rot.per = 0.2)               # Pourcentage de mots en rotation verticale
# Génération des nuages de mots
cloud(fit,
topic = 7,                  # Nombre de sujets à afficher
max.words = 300,              # Limite de mots affichés par nuage
scale = c(2, 0.5),           # Taille maximale et minimale des mots
colors = my_colors,          # Palette de couleurs pour les mots
random.order = FALSE,        # Les mots les plus fréquents sont affichés en premier
random.color = FALSE,        # Les couleurs sont attribuées par fréquence
rot.per = 0.2)               # Pourcentage de mots en rotation verticale
# Génération des nuages de mots
cloud(fit,
topic = 8,                  # Nombre de sujets à afficher
max.words = 300,              # Limite de mots affichés par nuage
scale = c(2, 0.5),           # Taille maximale et minimale des mots
colors = my_colors,          # Palette de couleurs pour les mots
random.order = FALSE,        # Les mots les plus fréquents sont affichés en premier
random.color = FALSE,        # Les couleurs sont attribuées par fréquence
rot.per = 0.2)               # Pourcentage de mots en rotation verticale
# Génération des nuages de mots
cloud(fit,
topic = 9,                  # Nombre de sujets à afficher
max.words = 300,              # Limite de mots affichés par nuage
scale = c(2, 0.5),           # Taille maximale et minimale des mots
colors = my_colors,          # Palette de couleurs pour les mots
random.order = FALSE,        # Les mots les plus fréquents sont affichés en premier
random.color = FALSE,        # Les couleurs sont attribuées par fréquence
rot.per = 0.2)               # Pourcentage de mots en rotation verticale
# Génération des nuages de mots
cloud(fit,
topic = 10,                  # Nombre de sujets à afficher
max.words = 300,              # Limite de mots affichés par nuage
scale = c(2, 0.5),           # Taille maximale et minimale des mots
colors = my_colors,          # Palette de couleurs pour les mots
random.order = FALSE,        # Les mots les plus fréquents sont affichés en premier
random.color = FALSE,        # Les couleurs sont attribuées par fréquence
rot.per = 0.2)               # Pourcentage de mots en rotation verticale
write_xlsx(topic_by_year_long, "topic_by_year_long.xlsx")
View(data_urls)
View(data_comm)
look_for(data_comm)
