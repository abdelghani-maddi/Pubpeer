family = binomial)
summary(modele_logit2)
## variables de controle
modele_logit2 <- glm(Retracted ~ bdd_regr$`Collab. men only` + bdd_regr$`Collab. men-women` + bdd_regr$`Collab. women only` + bdd_regr$`Man alone`+
log(bdd_regr$Nombre.de.commentaires) +
log(bdd_regr$nb_aut) +
log(bdd_regr$Journal_Rank_SJR_2021) +
is_oa
# bdd_regr$`Asiatic Region` +
# bdd_regr$`Northern America` +
# bdd_regr$`Western Europe`,
data = bdd_regr,
## variables de controle
modele_logit2 <- glm(Retracted ~ bdd_regr$`Collab. men only` + bdd_regr$`Collab. men-women` + bdd_regr$`Collab. women only` + bdd_regr$`Man alone`+
log(bdd_regr$Nombre.de.commentaires) +
log(bdd_regr$nb_aut) +
log(bdd_regr$Journal_Rank_SJR_2021) +
is_oa ,
# bdd_regr$`Asiatic Region` +
# bdd_regr$`Northern America` +
# bdd_regr$`Western Europe`,
data = bdd_regr,
family = binomial)
## variables de controle
modele_logit2 <- glm(Retracted ~ bdd_regr$`Collab. men only` + bdd_regr$`Collab. men-women` + bdd_regr$`Collab. women only` + bdd_regr$`Man alone`+
log(bdd_regr$Nombre.de.commentaires) +
log(bdd_regr$nb_aut) +
log(bdd_regr$Journal_Rank_SJR_2021) +
is_oa ,
# bdd_regr$`Asiatic Region` +
# bdd_regr$`Northern America` +
# bdd_regr$`Western Europe`,
data = bdd_regr,
family = binomial)
summary(modele_logit2)
# Regression ----
# Ajuster un modèle de régression logistique
modele_logit1 <- glm(Retracted ~ bdd_regr$`Collab. men only` + bdd_regr$`Collab. men-women` + bdd_regr$`Collab. women only` + bdd_regr$`Man alone`,
data = bdd_regr,
family = binomial)
summary(modele_logit1)
## variables de controle
modele_logit2 <- glm(Retracted ~ bdd_regr$`Collab. men only` + bdd_regr$`Collab. men-women` + bdd_regr$`Collab. women only` + bdd_regr$`Man alone`+
log(bdd_regr$Nombre.de.commentaires) +
log(bdd_regr$nb_aut) +
log(bdd_regr$Journal_Rank_SJR_2021) +
is_oa +
bdd_regr$`Asiatic Region` +
bdd_regr$`Northern America` +
bdd_regr$`Western Europe`,
data = bdd_regr,
family = binomial)
summary(modele_logit2)
View(bdd_pub)
reqsql= paste('select distinct publication, discipline from commentaires_par_discipline')
data_disc = dbGetQuery(con,reqsql)
## ajout des disciplines
bdd_regr <- bdd_regr %>%
left_join(., data_disc, by = "publication")
View(bdd_regr)
# Pivoter la discipline pour n'analyse
bdd_regr <- pivot_wider(bdd_regr, names_from = discipline, values_from = discipline, values_fn = list(discipline = function(x) 1),
values_fill = list(discipline = 0))
View(bdd_regr)
## ajout des disciplines
bdd_regr <- bdd_regr %>%
left_join(., data_disc, by = "publication") %>%
subset(., !is.na(discipline))
View(bdd_regr)
### Bdd
bdd_regr <- bdd_pub %>%
left_join(., df_nb_aut[,c(1,2,18,19,20)], by = "publication") %>%
select(publication, Retracted, Gtype, nb_aut, Nombre.de.commentaires, Journal_H_index_2021, Journal_Rank_SJR_2021, Journal_Région) %>%
left_join(., row_data, by = "publication")
## Opérations sur les variables
bdd_regr$Retracted <- factor(bdd_regr$Retracted)
bdd_regr$is_oa <- factor(bdd_regr$is_oa)
## Recoding bdd_regr$Retracted
bdd_regr$Retracted_rec <- bdd_regr$Retracted %>%
fct_recode(
"0" = "False",
NULL = "None",
"1" = "True"
)
## Recoding bdd_regr$oa_status into bdd_regr$oa_status_rec
bdd_regr$oa_status <- bdd_regr$oa_status %>%
fct_recode(
"bronze" = "'bronze'",
"closed" = "'closed'",
"gold" = "'gold'",
"green" = "'green'",
"hybrid" = "'hybrid'"
)
## Recoding bdd_regr$is_oa
bdd_regr$is_oa <- bdd_regr$is_oa %>%
fct_recode(
NULL = "",
"0" = "False",
"1" = "True"
)
## Recoding bdd_regr$Gtype
bdd_regr$Gtype <- bdd_regr$Gtype %>%
fct_explicit_na("Gtype_na")
# Pivoter le type de collabe H-F pour n'analyse
bdd_regr <- pivot_wider(bdd_regr, names_from = Gtype, values_from = Gtype, values_fn = list(Gtype = function(x) 1),
values_fill = list(Gtype = 0))
## Recoding bdd_regr$Journal_Région
bdd_regr$Journal_Région <- bdd_regr$Journal_Région %>%
fct_recode(
"None" = ""
)
# Pivoter la région pour n'analyse
bdd_regr <- pivot_wider(bdd_regr, names_from = Journal_Région, values_from = Journal_Région, values_fn = list(Journal_Région = function(x) 1),
values_fill = list(Journal_Région = 0))
bdd_regr <- subset(bdd_regr, complete.cases(bdd_regr)) %>%
select(., -None, -Gtype_na) # toutes leurs valeurs sont nulles car filtre précédent
## ajout des disciplines
bdd_regr <- bdd_regr %>%
left_join(., data_disc, by = "publication") %>%
subset(., !is.na(discipline))
View(bdd_regr)
# Pivoter la discipline pour n'analyse
bdd_regr <- pivot_wider(bdd_regr, names_from = discipline, values_from = discipline, values_fn = list(discipline = function(x) 1),
values_fill = list(discipline = 0))
View(bdd_regr)
# Regression ----
# Ajuster un modèle de régression logistique
modele_logit1 <- glm(Retracted ~ bdd_regr$`Collab. men only` + bdd_regr$`Collab. men-women` + bdd_regr$`Collab. women only` + bdd_regr$`Man alone`,
data = bdd_regr,
family = binomial)
summary(modele_logit1)
## variables de controle
modele_logit2 <- glm(Retracted ~ bdd_regr$`Collab. men only` + bdd_regr$`Collab. men-women` + bdd_regr$`Collab. women only` + bdd_regr$`Man alone`+
log(bdd_regr$Nombre.de.commentaires) +
log(bdd_regr$nb_aut) +
log(bdd_regr$Journal_Rank_SJR_2021) +
is_oa +
bdd_regr$`Asiatic Region` +
bdd_regr$`Northern America` +
bdd_regr$`Western Europe`,
data = bdd_regr,
family = binomial)
summary(modele_logit2)
## variables de controle : discipline
modele_logit2 <- glm(Retracted ~ bdd_regr$`Collab. men only` + bdd_regr$`Collab. men-women` + bdd_regr$`Collab. women only` + bdd_regr$`Man alone`+
log(bdd_regr$Nombre.de.commentaires) +
log(bdd_regr$nb_aut) +
log(bdd_regr$Journal_Rank_SJR_2021) +
is_oa +
bdd_regr$`Asiatic Region` +
bdd_regr$`Northern America` +
bdd_regr$`Western Europe` +
bdd_regr$`Social Sciences` +
bdd_regr$Multidisciplinary +
bdd_regr$`Physical Sciences` +
bdd_regr$Technology +
bdd_regr$`Arts Humanities`,
data = bdd_regr,
family = binomial)
## variables de controle : discipline
modele_logit3 <- glm(Retracted ~ bdd_regr$`Collab. men only` + bdd_regr$`Collab. men-women` + bdd_regr$`Collab. women only` + bdd_regr$`Man alone`+
log(bdd_regr$Nombre.de.commentaires) +
log(bdd_regr$nb_aut) +
log(bdd_regr$Journal_Rank_SJR_2021) +
is_oa +
bdd_regr$`Asiatic Region` +
bdd_regr$`Northern America` +
bdd_regr$`Western Europe` +
bdd_regr$`Social Sciences` +
bdd_regr$Multidisciplinary +
bdd_regr$`Physical Sciences` +
bdd_regr$Technology +
bdd_regr$`Arts Humanities`,
data = bdd_regr,
family = binomial)
summary(modele_logit3)
# Calculer le coefficient de détermination R^2
R2 <- 1 - (modele_logit3$deviance / modele_logit$null.deviance)
cat("R^2 : ", R2, "\n")
## variables de controle
modele_logit2 <- glm(Retracted ~ bdd_regr$`Collab. men only` + bdd_regr$`Collab. men-women` + bdd_regr$`Collab. women only` + bdd_regr$`Man alone`+
log(bdd_regr$Nombre.de.commentaires) +
log(bdd_regr$nb_aut) +
log(bdd_regr$Journal_Rank_SJR_2021) +
is_oa +
bdd_regr$`Asiatic Region` +
bdd_regr$`Northern America` +
bdd_regr$`Western Europe`,
data = bdd_regr,
family = binomial)
summary(modele_logit2)
# Calculer le coefficient de détermination R^2
R2 <- 1 - (modele_logit2$deviance / modele_logit$null.deviance)
cat("R^2 : ", R2, "\n")
# Calculer le coefficient de détermination R^2
R2 <- 1 - (modele_logit1$deviance / modele_logit$null.deviance)
cat("R^2 : ", R2, "\n")
## variables de controle
modele_logit2 <- glm(Retracted ~ bdd_regr$`Collab. men only` + bdd_regr$`Collab. men-women` + bdd_regr$`Collab. women only` + bdd_regr$`Man alone`+
log(bdd_regr$Nombre.de.commentaires) +
log(bdd_regr$nb_aut) +
log(bdd_regr$Journal_Rank_SJR_2021) +
is_oa +
bdd_regr$`Asiatic Region` +
bdd_regr$`Northern America` +
bdd_regr$`Western Europe`,
data = bdd_regr,
family = binomial)
summary(modele_logit2)
# Calculer le coefficient de détermination R^2
R2 <- 1 - (modele_logit2$deviance / modele_logit$null.deviance)
cat("R^2 : ", R2, "\n")
## variables de controle : discipline
modele_logit3 <- glm(Retracted ~ bdd_regr$`Collab. men only` + bdd_regr$`Collab. men-women` + bdd_regr$`Collab. women only` + bdd_regr$`Man alone`+
log(bdd_regr$Nombre.de.commentaires) +
log(bdd_regr$nb_aut) +
log(bdd_regr$Journal_Rank_SJR_2021) +
is_oa +
bdd_regr$`Asiatic Region` +
bdd_regr$`Northern America` +
bdd_regr$`Western Europe` +
bdd_regr$`Social Sciences` +
bdd_regr$Multidisciplinary +
bdd_regr$`Physical Sciences` +
bdd_regr$Technology +
bdd_regr$`Arts Humanities`,
data = bdd_regr,
family = binomial)
summary(modele_logit3)
# Calculer le coefficient de détermination R^2
R2 <- 1 - (modele_logit3$deviance / modele_logit$null.deviance)
cat("R^2 : ", R2, "\n")
# Afficher l'AIC et le BIC du modèle
AIC(modele_logit)
# Afficher l'AIC et le BIC du modèle
AIC(modele_logit3)
BIC(modele_logit3)
# Afficher les statistiques de Wald
summary(modele_logit)$coefficients[, "Pr(>|z|)"]
# Afficher les statistiques de Wald
summary(modele_logit3)$coefficients[, "Pr(>|z|)"]
library(caret)
install.packages("caret")
install.packages("caret")
library(caret)
library(caret)
library(caret)
library(boot)
library(boot)
set.seed(123)
folds <- createFolds(bdd_retract$Retract, k = 5, list = TRUE, returnTrain = FALSE)
install.packages("caret")
library(caret)
library(caret)
library(boot)
set.seed(123)
folds <- createFolds(bdd_retract$Retract, k = 5, list = TRUE, returnTrain = FALSE)
install.packages("rsample")
library(rsample)
folds <- vfold_cv(bdd_regr, v = 5, repeats = 1)
results <- folds %>%
mutate(model = map(splits, ~glm(Retracted ~ bdd_regr$`Collab. men only` + bdd_regr$`Collab. men-women` + bdd_regr$`Collab. women only` + bdd_regr$`Man alone`, data = analysis(.), family = binomial)),
predict = map(model, ~predict(object = .x, newdata = assessment(.), type = "response")),
accuracy = map2_dbl(predict, splits$assessment, ~mean((.x > 0.5) == .y$Retracted)))
library(dplyr)
results <- folds %>%
mutate(model = map(splits, ~glm(Retracted ~ bdd_regr$`Collab. men only` + bdd_regr$`Collab. men-women` + bdd_regr$`Collab. women only` + bdd_regr$`Man alone`, data = analysis(.), family = binomial)),
predict = map(model, ~predict(object = .x, newdata = assessment(.), type = "response")),
accuracy = map2_dbl(predict, splits$assessment, ~mean((.x > 0.5) == .y$Retracted)))
library(rsample)
library(boot)
folds <- vfold_cv(bdd_regr, v = 5, repeats = 1)
library(dplyr)
results <- folds %>%
mutate(model = map(splits, ~glm(Retracted ~ bdd_regr$`Collab. men only` + bdd_regr$`Collab. men-women` + bdd_regr$`Collab. women only` + bdd_regr$`Man alone`, data = analysis(.), family = binomial)),
predict = map(model, ~predict(object = .x, newdata = assessment(.), type = "response")),
accuracy = map2_dbl(predict, splits$assessment, ~mean((.x > 0.5) == .y$Retracted)))
library(tidyverse)
library(tidyverse)
results <- folds %>%
mutate(model = map(splits, ~glm(Retracted ~ bdd_regr$`Collab. men only` + bdd_regr$`Collab. men-women` + bdd_regr$`Collab. women only` + bdd_regr$`Man alone`, data = analysis(.), family = binomial)),
predict = map(model, ~predict(object = .x, newdata = assessment(.), type = "response")),
accuracy = map2_dbl(predict, splits$assessment, ~mean((.x > 0.5) == .y$Retracted)))
rm(list = ls()) #supprimer tous les objets
library(tidyverse)
library(gtsummary)
library(tidyverse)
rm(list = ls()) #supprimer tous les objets
library(tidyverse)
rm(list = ls()) #supprimer tous les objets
source("~/Documents/Pubpeer project/Pubpeer/Gender st.R", echo=TRUE)
library(tidyverse)
library(questionr)
library(RPostgres)
library(gtsummary)
library(openxlsx2)
library(gender)
library(GenderInfer)
# devtools::install_github("kalimu/genderizeR")
#library(genderizeR)
library(openxlsx)
data_pub <- readxl::read_excel("D:/bdd/data_pub.xlsx")
# lecture des données
df_nb_aut <- readxl::read_excel("D:/bdd/df_nb_aut.xlsx")
df_nb_aut <- readxl::read_excel("D:/bdd/df_nb_aut.xlsx")
data_comm <- read_excel("D:/bdd/data_comm.xlsx")
data_comm <- readxl::read_excel("D:/bdd/data_comm.xlsx")
rtw <- readxl::read_excel("D:/bdd/RWDBDNLD04242023.xlsx")
### Extraction colonnes d'intérêt et suppression des autres données
df <- data_pub %>%
select(publication, Auteurs, Pays_institution, `Nombre de commentaires`, Année, starts_with("Journal"))
### Supprimer les données
rm(data_pub)
# Pivoter les noms des auteurs par autant de lignes que d'auteurs et dupliquer l'identifiant "publication"
df_unnested <- df %>%
mutate(Auteurs_extraits = str_extract_all(Auteurs, "'([\\p{L}\\s-]*)'")) %>%
unnest(Auteurs_extraits) %>%
select(-Auteurs)
# Renommer la nouvelle colonne "Auteurs"
names(df_unnested)[names(df_unnested) == "Auteurs_extraits"] <- "Auteur"
# Supprimer les guillemets simples des noms d'auteurs
df_unnested$Auteur <- gsub("'", "", df_unnested$Auteur)
# Extraire le prénom de chaque nom d'auteur
df_unnested$prenoms <- sapply(strsplit(df_unnested$Auteur, " "), function(x) x[1])
# Usage de genderizeR
givenNames = findGivenNames(df_unnested$Auteur, progress = FALSE, apikey = '***********************')
library(tidyverse)
library(questionr)
library(RPostgres)
library(gtsummary)
library(openxlsx2)
library(gender)
library(GenderInfer)
# devtools::install_github("kalimu/genderizeR")
library(genderizeR)
library(openxlsx)
#write.xlsx(givenNames, "D:/bdd/gender_proba.xlsx")
givenNames <- readxl::read_excel("D:/bdd/gender_proba.xlsx")
# matcher les prénoms
df_unnested$prenoms <- tolower(df_unnested$prenoms) # mettre en minuscules
givenNames <- givenNames %>% # extraire valeurs uniques
unique()
df_final <- merge(df_unnested, givenNames, by.x = "prenoms", by.y = "given_name", all.x = TRUE) # matcher
View(df_final)
View(givenNames)
View(df_unnested)
View(df_final)
df_final$gender[df_final$proba < 0.6] <- "unisex" # modifier les probas < 0.6 à Unisexe
df_final$gender[is.na(df_final$gender) & length(prenoms)==1] <- "initials" # modifier les "NA" de gender en "initials"
df_final$gender[is.na(df_final$gender) & length(df_final$prenoms)==1] <- "initials" # modifier les "NA" de gender en "initials"
View(df_final)
df_final$gender[is.na(df_final$gender) & length(df_final$prenoms)==1] <- "initials" # modifier les "NA" de gender en "initials"
length(df_final$prenoms)
# Remplacer les valeurs NA dans la colonne "gender" selon les conditions données
df_final$gender <- ifelse(is.na(df_final$gender) & nchar(df_final$prenoms) == 1, "initials", "undefined")
View(df_final)
describe(df_final$gender)
df_final <- merge(df_unnested, givenNames, by.x = "prenoms", by.y = "given_name", all.x = TRUE) # matcher
df_final$gender[df_final$proba < 0.6] <- "unisex" # modifier les probas < 0.6 à Unisexe
# Remplacer les valeurs NA dans la colonne "gender" selon les conditions données
# Remplacer les valeurs NA dans la colonne "gender" selon les conditions données
df_final$gender[is.na(df_final$gender) & nchar(df_final$prenoms) == 1] <- "initials"
df_final$gender[is.na(df_final$gender) & !(nchar(df_final$prenoms) == 1)] <- "undefined"
describe(df_final$gender)
df_final$gender[is.na(df_final$gender) & nchar(df_final$prenoms) < 3] <- "initials"
df_final$gender[is.na(df_final$gender) & !(nchar(df_final$prenoms) == 1)] <- "undefined"
describe(df_final$gender)
df_final <- merge(df_unnested, givenNames, by.x = "prenoms", by.y = "given_name", all.x = TRUE) # matcher
df_final$gender[df_final$proba < 0.6] <- "unisex" # modifier les probas < 0.6 à Unisexe
# Remplacer les valeurs NA dans la colonne "gender" selon les conditions données
# Remplacer les valeurs NA dans la colonne "gender" selon les conditions données
df_final$gender[is.na(df_final$gender) & nchar(df_final$prenoms) < 3] <- "initials"
df_final$gender[is.na(df_final$gender) & !(nchar(df_final$prenoms) > 2)] <- "undefined"
describe(df_final$gender)
df_final <- merge(df_unnested, givenNames, by.x = "prenoms", by.y = "given_name", all.x = TRUE) # matcher
df_final$gender[df_final$proba < 0.6] <- "unisex" # modifier les probas < 0.6 à Unisexe
# Remplacer les valeurs NA dans la colonne "gender" selon les conditions données
df_final$gender[is.na(df_final$gender) & nchar(df_final$prenoms) <= 2] <- "initials"
df_final$gender[is.na(df_final$gender) & !(nchar(df_final$prenoms) > 2)] <- "undefined"
describe(df_final$gender)
View(df_final)
df_final <- merge(df_unnested, givenNames, by.x = "prenoms", by.y = "given_name", all.x = TRUE) # matcher
df_final$gender[df_final$proba < 0.6] <- "unisex" # modifier les probas < 0.6 à Unisexe
# Remplacer les valeurs NA dans la colonne "gender" selon les conditions données
df_final$gender[is.na(df_final$gender) & nchar(df_final$prenoms) <= 2] <- "initials"
df_final$gender[is.na(df_final$gender) & !(nchar(df_final$prenoms) <= 2)] <- "undefined"
describe(df_final$gender)
df_final$gender[is.na(df_final$gender)] <- "undefined"
describe(df_final$gender)
View(df_final)
View(givenNames)
# Extraire la partie à gauche du tiret "-" dans les prénoms composés
df_unnested$prenoms <- sapply(strsplit(df_unnested$prenoms, "-"), function(x) x[1])
df_final <- merge(df_unnested, givenNames, by.x = "prenoms", by.y = "given_name", all.x = TRUE) # matcher
df_final$gender[df_final$proba < 0.6] <- "unisex" # modifier les probas < 0.6 à Unisexe
# Remplacer les valeurs NA dans la colonne "gender" selon les conditions données
df_final$gender[is.na(df_final$gender) & nchar(df_final$prenoms) <= 2] <- "initials"
df_final$gender[is.na(df_final$gender) & !(nchar(df_final$prenoms) <= 2)] <- "undefined"
df_final$gender[is.na(df_final$gender)] <- "undefined"
describe(df_final$gender)
View(df_final)
## Analyse des données ----
`%not_in%` <- purrr::negate(`%in%`)
tb <- df_final %>%
select(publication, gender, `Nombre de commentaires`, Année, starts_with("Journal")) %>%
subset(., gender %not_in% c("initials", "unisex", "undefined"))
write.xlsx(tb, "D:/bdd/tb_finale.xlsx")
View(df_final)
df_final <- merge(df_unnested, givenNames, by.x = "prenoms", by.y = "given_name", all.x = TRUE) # matcher
df_final$g_prob_05 %>%
df_final$gender[df_final$proba < 0.6] <- "unisex" # modifier les probas < 0.6 à Unisexe
library(tidyverse)
library(questionr)
library(RPostgres)
library(gtsummary)
library(openxlsx2)
library(gender)
library(GenderInfer)
# devtools::install_github("kalimu/genderizeR")
library(genderizeR)
library(openxlsx)
library(tidyverse)
df_final$g_prob_05 <- df_final$gender
df_final$g_prob_05[df_final$proba < 0.6] <- "unisex" # modifier les probas < 0.6 à Unisexe
df_final <- merge(df_unnested, givenNames, by.x = "prenoms", by.y = "given_name", all.x = TRUE) # matcher
View(givenNames)
df_final$g_prob_06 <- df_final$gender
df_final$g_prob_06[df_final$proba < 0.6] <- "unisex" # modifier les probas < 0.6 à Unisexe
df_final$g_prob_06 <- df_final$gender
df_final$g_prob_06[df_final$proba < 0.6] <- "unisex" # modifier les probas < 0.6 à Unisexe
df_final$g_prob_07 <- df_final$gender
df_final$g_prob_06[df_final$proba < 0.7] <- "unisex" # modifier les probas < 0.6 à Unisexe
df_final$g_prob_08 <- df_final$gender
df_final$g_prob_06[df_final$proba < 0.8] <- "unisex" # modifier les probas < 0.6 à Unisexe
df_final$g_prob_09 <- df_final$gender
df_final$g_prob_06[df_final$proba < 0.9] <- "unisex" # modifier les probas < 0.6 à Unisexe
df_final$g_prob_100 <- df_final$gender
df_final$g_prob_06[df_final$proba > 0.9 ] <- "unisex" # modifier les probas < 0.6 à Unisexe
View(df_unnested)
View(df_final)
df_final <- merge(df_unnested, givenNames, by.x = "prenoms", by.y = "given_name", all.x = TRUE) # matcher
# df_final$gender[df_final$proba < 0.6] <- "unisex" # modifier les probas < 0.6 à Unisexe
df_final$g_prob_06 <- df_final$gender
df_final$g_prob_06[df_final$proba < 0.6] <- "unisex" # modifier les probas < 0.6 à Unisexe
df_final$g_prob_07 <- df_final$gender
df_final$g_prob_07[df_final$proba < 0.7] <- "unisex" # modifier les probas < 0.6 à Unisexe
df_final$g_prob_08 <- df_final$gender
df_final$g_prob_08[df_final$proba < 0.8] <- "unisex" # modifier les probas < 0.6 à Unisexe
df_final$g_prob_09 <- df_final$gender
df_final$g_prob_09[df_final$proba < 0.9] <- "unisex" # modifier les probas < 0.6 à Unisexe
df_final$g_prob_100 <- df_final$gender
df_final$g_prob_100[df_final$proba > 0.9 ] <- "unisex" # modifier les probas < 0.6 à Unisexe
View(df_final)
df_final$g_prob_100 <- df_final$gender
df_final$g_prob_100[df_final$proba > 0.9 & df_final$proba < 0.99] <- "unisex" # modifier les probas < 0.6 à Unisexe
View(df_final)
df_final <- merge(df_unnested, givenNames, by.x = "prenoms", by.y = "given_name", all.x = TRUE) # matcher
# df_final$gender[df_final$proba < 0.6] <- "unisex" # modifier les probas < 0.6 à Unisexe
df_final$g_prob_06 <- df_final$gender
df_final$g_prob_06[df_final$proba < 0.6 & df_final$proba > 0.5] <- "unisex" # modifier les probas < 0.6 à Unisexe
df_final$g_prob_07 <- df_final$gender
df_final$g_prob_07[df_final$proba < 0.7 & df_final$proba > 0.5] <- "unisex" # modifier les probas < 0.6 à Unisexe
df_final$g_prob_08 <- df_final$gender
df_final$g_prob_08[df_final$proba < 0.8 & df_final$proba > 0.5] <- "unisex" # modifier les probas < 0.6 à Unisexe
df_final$g_prob_09 <- df_final$gender
df_final$g_prob_09[df_final$proba < 0.9 & df_final$proba > 0.5] <- "unisex" # modifier les probas < 0.6 à Unisexe
df_final$g_prob_100 <- df_final$gender
df_final$g_prob_100[df_final$proba > 0.5 & df_final$proba < 0.99] <- "unisex" # modifier les probas < 0.6 à Unisexe
View(df_final)
df_final$g_prob_06[is.na(df_final$g_prob_06) & nchar(df_final$prenoms) <= 2] <- "initials"
df_final$g_prob_06[is.na(df_final$g_prob_06) & !(nchar(df_final$prenoms) <= 2)] <- "undefined"
df_final$g_prob_06[is.na(df_final$g_prob_06)] <- "undefined"
df_final <- merge(df_unnested, givenNames, by.x = "prenoms", by.y = "given_name", all.x = TRUE) # matcher
# df_final$gender[df_final$proba < 0.6] <- "unisex" # modifier les probas < 0.6 à Unisexe
df_final$g_prob_06 <- df_final$gender
df_final$g_prob_06[df_final$proba < 0.6 & df_final$proba > 0.5] <- "unisex" # modifier les probas < 0.6 à Unisexe
# Remplacer les valeurs NA dans la colonne "gender" selon les conditions données
df_final$g_prob_06[is.na(df_final$g_prob_06) & nchar(df_final$prenoms) <= 2] <- "initials"
df_final$g_prob_06[is.na(df_final$g_prob_06) & !(nchar(df_final$prenoms) <= 2)] <- "undefined"
df_final$g_prob_06[is.na(df_final$g_prob_06)] <- "undefined"
df_final$g_prob_07 <- df_final$gender
df_final$g_prob_07[df_final$proba < 0.7 & df_final$proba > 0.5] <- "unisex" # modifier les probas < 0.6 à Unisexe
# Remplacer les valeurs NA dans la colonne "gender" selon les conditions données
df_final$g_prob_07[is.na(df_final$g_prob_07) & nchar(df_final$prenoms) <= 2] <- "initials"
df_final$g_prob_07[is.na(df_final$g_prob_07) & !(nchar(df_final$prenoms) <= 2)] <- "undefined"
df_final$g_prob_07[is.na(df_final$g_prob_07)] <- "undefined"
df_final$g_prob_08 <- df_final$gender
df_final$g_prob_08[df_final$proba < 0.8 & df_final$proba > 0.5] <- "unisex" # modifier les probas < 0.6 à Unisexe
df_final$g_prob_08[is.na(df_final$g_prob_08) & nchar(df_final$prenoms) <= 2] <- "initials"
df_final$g_prob_08[is.na(df_final$g_prob_08) & !(nchar(df_final$prenoms) <= 2)] <- "undefined"
df_final$g_prob_08[is.na(df_final$g_prob_08)] <- "undefined"
df_final$g_prob_09 <- df_final$gender
df_final$g_prob_09[df_final$proba < 0.9 & df_final$proba > 0.5] <- "unisex" # modifier les probas < 0.6 à Unisexe
df_final$g_prob_09[is.na(df_final$g_prob_09) & nchar(df_final$prenoms) <= 2] <- "initials"
df_final$g_prob_09[is.na(df_final$g_prob_09) & !(nchar(df_final$prenoms) <= 2)] <- "undefined"
df_final$g_prob_09[is.na(df_final$g_prob_09)] <- "undefined"
df_final$g_prob_100 <- df_final$gender
df_final$g_prob_100[df_final$proba > 0.5 & df_final$proba < 0.99] <- "unisex" # modifier les probas < 0.6 à Unisexe
df_final$g_prob_100[is.na(df_final$g_prob_100) & nchar(df_final$prenoms) <= 2] <- "initials"
df_final$g_prob_100[is.na(df_final$g_prob_100) & !(nchar(df_final$prenoms) <= 2)] <- "undefined"
df_final$g_prob_100[is.na(df_final$g_prob_100)] <- "undefined"
View(df_final)
describe(df_final$g_prob_08)
# Remplacer les valeurs NA dans la colonne "gender" selon les conditions données
df_final$gender[is.na(df_final$gender) & nchar(df_final$prenoms) <= 2] <- "initials"
df_final$gender[is.na(df_final$gender) & !(nchar(df_final$prenoms) <= 2)] <- "undefined"
df_final$gender[is.na(df_final$gender)] <- "undefined"
# stats desc proba et genre
df_final %>%
tbl_summary(
include = c("proba", "g_prob_06", "g_prob_07", "g_prob_08", "g_prob_09", "g_prob_100")
)
