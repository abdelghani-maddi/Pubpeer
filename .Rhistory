fct_infreq() |>
questionr::freq()
View(f_autre)
###
# Importer les données téseaurus pour unifier et mettre en forme les sites (ceux qui sont les plus fréquents)
class_sites2 <- readxl::read_xlsx("classification sites2.xlsx", col_names = TRUE)
t3 <- filter(t2, t2$type_sit=="Autre") %>%
fuzzyjoin::regex_left_join(class_sites2, by = c("site" = "site")) %>% # un left join avec expressions régulières (contain)
data.frame(factor(.$site.y), factor(.$type_sit.y)) %>%
.[,c(1,2,8)]
names(t3) <- c("publication", "site", "type_sit")
## Recoding t$type
t3$type_sit <- t3$type_sit %>%
fct_explicit_na("Autre")
##
f_autre <- t3$site[t3$type_sit=="Autre"] |>
fct_infreq() |>
questionr::freq()
## Union des deux tables
t4 <- filter(t2, t2$type_sit %not_in% c("Autre")) %>%
union_all(.,t3)
###
tbl_t4 <- data.frame(t4$publication,t4$type_sit)
tbl_summary(tbl_t4)
# Importer les données téseaurus pour unifier et mettre en forme les sites (ceux qui sont les plus fréquents)
class_sites2 <- readxl::read_xlsx("classification sites2.xlsx", col_names = TRUE)
t3 <- filter(t2, t2$type_sit=="Autre") %>%
fuzzyjoin::regex_left_join(class_sites2, by = c("site" = "site")) %>% # un left join avec expressions régulières (contain)
data.frame(factor(.$site.y), factor(.$type_sit.y)) %>%
.[,c(1,2,8)]
names(t3) <- c("publication", "site", "type_sit")
## Recoding t$type
t3$type_sit <- t3$type_sit %>%
fct_explicit_na("Autre")
##
f_autre <- t3$site[t3$type_sit=="Autre"] |>
fct_infreq() |>
questionr::freq()
## Union des deux tables
t4 <- filter(t2, t2$type_sit %not_in% c("Autre")) %>%
union_all(.,t3)
View(t4)
# Importer les données téseaurus pour unifier et mettre en forme les sites (ceux qui sont les plus fréquents)
class_sites <- readxl::read_xlsx("classification sites.xlsx", col_names = TRUE)
t2 <- t %>%
left_join(class_sites, by = c("site")) %>% # un left join avec expressions régulières (contain)
data.frame(factor(.$site), factor(.$type_sit)) %>%
.[,c(1,5,4)]
#mutate(id = seq(1:length(t$site))) # ajouter une colone avec id unique au cas où -- pas nécessaire
names(t2) <- c("publication", "site", "type_sit")
## Recoding t$type
t2$type_sit <- t2$type_sit %>%
fct_explicit_na("Autre")
##
f_autre <- t2$site[t2$type_sit=="Autre"] |>
fct_infreq() |>
questionr::freq()
###
# Importer les données téseaurus pour unifier et mettre en forme les sites (ceux qui sont les plus fréquents)
class_sites2 <- readxl::read_xlsx("classification sites2.xlsx", col_names = TRUE)
t3 <- filter(t2, t2$type_sit=="Autre") %>%
fuzzyjoin::regex_left_join(class_sites2, by = c("site" = "site")) %>% # un left join avec expressions régulières (contain)
data.frame(factor(.$site.y), factor(.$type_sit.y)) %>%
.[,c(1,2,8)]
names(t3) <- c("publication", "site", "type_sit")
## Recoding t$type
t3$type_sit <- t3$type_sit %>%
fct_explicit_na("Autre")
##
f_autre <- t3$site[t3$type_sit=="Autre"] |>
fct_infreq() |>
questionr::freq()
t4 <- filter(t2, t2$type_sit %not_in% c("Autre")) %>%
union_all(.,t3)
# Importer les données téseaurus pour unifier et mettre en forme les sites (ceux qui sont les plus fréquents)
class_sites <- readxl::read_xlsx("classification sites.xlsx", col_names = TRUE)
t2 <- t %>%
left_join(class_sites, by = c("site")) %>% # un left join avec expressions régulières (contain)
data.frame(factor(.$site), factor(.$type_sit)) %>%
.[,c(1,5,4)]
#mutate(id = seq(1:length(t$site))) # ajouter une colone avec id unique au cas où -- pas nécessaire
names(t2) <- c("publication", "site", "type_sit")
## Recoding t$type
t2$type_sit <- t2$type_sit %>%
fct_explicit_na("Autre")
##
f_autre <- t2$site[t2$type_sit=="Autre"] |>
fct_infreq() |>
questionr::freq()
###
# Importer les données téseaurus pour unifier et mettre en forme les sites (ceux qui sont les plus fréquents)
class_sites2 <- readxl::read_xlsx("classification sites2.xlsx", col_names = TRUE)
t3 <- filter(t2, t2$type_sit=="Autre") %>%
fuzzyjoin::regex_left_join(class_sites2, by = c("site" = "site")) %>% # un left join avec expressions régulières (contain)
data.frame(factor(.$site.y), factor(.$type_sit.y)) %>%
.[,c(1,2,8)]
names(t3) <- c("publication", "site", "type_sit")
## Recoding t$type
t3$type_sit <- t3$type_sit %>%
fct_explicit_na("Autre")
##
f_autre <- t3$site[t3$type_sit=="Autre"] |>
fct_infreq() |>
questionr::freq()
## Union des deux tables
t4 <- filter(t2, t2$type_sit %not_in% c("Autre")) %>%
union_all(.,t3)
View(t4)
View(f_autre)
View(t4)
f_autre <- t3$site[t3$type_sit=="Autre"] |>
fct_infreq() |>
questionr::freq()
View(t3)
# chargement des packages ----
library(stringr)
library(tibble)
library(tidytext)
library(textdata)
library(Hmisc)
library(zoo)
library(flextable)
library(DBI)
library(data.table)
library(tidyverse)
library(trimmer)
library(DescTools)
library(questionr)
library(RPostgres)
library(lubridate)
library(timechange)
library(urltools)
library(stringr)
library(rebus)
library(Matrix)
library(plyr)
library(sjmisc)
library(regexplain)
library(gtsummary)
library(igraph)
# Dossier travail
setwd('/Users/maddi/Documents/Pubpeer project/Pubpeer')
# Connexion ----
con<-dbConnect(RPostgres::Postgres())
db <- 'SKEPTISCIENCE'  #provide the name of your db
host_db <- 'localhost' # server
db_port <- '5433'  # port DBA
db_user <- 'postgres' # nom utilisateur
db_password <- 'Maroua1912'
con <- dbConnect(RPostgres::Postgres(), dbname = db, host=host_db, port=db_port, user=db_user, password=db_password)
# Test connexion
dbListTables(con)
reqsql= paste('select inner_id, publication, html as comm from data_commentaires')
data_comm = dbGetQuery(con,reqsql)
#### Etape 0 : Transformer le type de données pour plus de facilité/performance dans le traitement ----
URL_var <- as_tibble(data_comm) %>% # Etape 0
#### Etape 1 : Se limiter aux commentaires avec au moins un lien hypertexte  ----
subset(., comm %like% c("%https%","%http%","%www%","%WWW%")) %>% # Etape 1
#### Etape 2 : Recupérer uniquement les commentaires (l'intérêt de garder le subset est de pouvoir selectionner par la suite les disciplines aussi) ----
.$comm # Etape 2
#### Etape 3 : nommer le vecteur avec l'identifiant des publications ----
names(URL_var) <- subset(data_comm$publication, data_comm$comm %like% c("%https%","%http%","%www%","%WWW%")) # Etape 3
#### Etape 4 : Créer un pattern pour l'extraction des URL ----
pat<- "//" %R% capture(one_or_more(char_class(WRD,DOT)))
#### Etape 5 : Utiliser "rebus" pour extraire l'URL principal ----
URL_extract<-str_extract_all(URL_var, "(?<=//)[^\\s/:]+") #URL_extract<-str_match_all(URL_var, pattern = pat)
# Attribuer aux liens, les identifiants des publications d'où ils sont issus ----
names(URL_extract) <- names(URL_var)
# Transformer en liste de dataframe
list_data <- Map(as.data.frame, URL_extract) %>%
rbindlist(., use.names = F, idcol = names(.))
names(list_data) = c("publication", "site")
df = data.frame(list_data$publication, factor(list_data$site))
names(df) = c("publication", "site")
# list_data[list_data$publication == "106541"] -- petit test -- OK :)
# Nettoyer les données et préparer des fichiers txt pour vosviewer ----
`%not_like%` <- purrr::negate(`%like%`) # juste au cas où j'aurais besoin du not_like.
`%not_in%` <- purrr::negate(`%in%`) # juste au cas où j'aurais besoin du not_like.
donnees <- list_data[df$site %like% "%\\.%"]
# Le site doit contenir au moins un caractère alphabetique
donnees1 <- donnees[grep("[a-zA-Z]", donnees$site), ]
# Supprimer tous les caractères spéciaux sauf le "."
donnees2 <- data.frame(donnees1$publication, stringr::str_remove_all(donnees1$site, "[\\p{P}\\p{S}&&[^.]]"))
names(donnees2) = c("publication", "site")
# Transformation des données (sites as integer)
donnees3 <- data.frame(as.integer(donnees2$publication), donnees2$site)
names(donnees3) = c("publication", "site")
# Typologie des sites ----
## Transformer en "factor" les sites
t <- data.frame(donnees3$publication, factor(donnees3$site))
names(t) <- c("publication","site")
# Utiliser la fonction ave() pour ajouter une colonne avec une séquence numérique qui se réinitialise selon id
t$seq <- ave(t$publication, t$publication, FUN = function(x) seq_along(x))
# Utiliser la fonction group_by() pour regrouper les données par identifiant
grouped_df <- t %>%
group_by(publication) %>%
mutate(quartile = ntile(seq, 4))
# Calculer les fréquences pour avoir une idée de la distribution des sites
f <- grouped_df$site |>
fct_infreq() |>
questionr::freq()
# juste pour rajouter la noms de lignes en tant que colonne
freqsit <- data.frame(rownames(f),f)
names(freqsit) = c("site","nb","part","freq")
# Importer les données téseaurus pour unifier et mettre en forme les sites (ceux qui sont les plus fréquents)
class_sites <- readxl::read_xlsx("classification sites.xlsx", col_names = TRUE)
t2 <- t %>%
left_join(class_sites, by = c("site")) %>% # un left join avec expressions régulières (contain)
data.frame(factor(.$site), factor(.$type_sit)) %>%
.[,c(1,3,6,7)]
names(t2) <- c("publication", "seq","site", "sit_harm")
View(t2)
# Remplacer les valeurs manquantes dans col1 avec les valeurs correspondantes dans col2
as.character(t2$site)
# Remplacer les valeurs manquantes dans col1 avec les valeurs correspondantes dans col2
t2$site <- as.character(t2$site)
t2$sit_harm <- as.character(t2$sit_harm)
View(t2)
t2$sit_harm[is.na(t2$sit_harm)] <- t2$site[is.na(t2$sit_harm)]
View(t2)
t2$site <- factor(t2$site)
t2$sit_harm <- factor(t2$sit_harm)
View(t2)
dbWriteTable(con, "data_sites_harmo", t2)
# Créer un vecteur textuel
v <- c("chat", "chien", "cheval", "rat", "mouton", "coq", "poule", "vache")
# Définir une fonction pour calculer la distance de Levenshtein entre deux chaînes
levenshtein_distance <- function(s1, s2) {
m <- nchar(s1)
n <- nchar(s2)
d <- matrix(0, n + 1, m + 1)
d[1, ] <- 0:m
d[, 1] <- 0:n
for (j in 2:(m + 1)) {
for (i in 2:(n + 1)) {
if (substr(s1, j - 1, j - 1) == substr(s2, i - 1, i - 1)) {
d[i, j] <- d[i - 1, j - 1]
} else {
d[i, j] <- min(d[i - 1, j], d[i, j - 1], d[i - 1, j - 1]) + 1
}
}
}
d[n + 1, m + 1]
}
# Définir une fonction pour regrouper les éléments d'un vecteur selon leur ressemblance
group_similar_elements <- function(v, threshold) {
groups <- list()
for (i in seq_along(v)) {
matched <- FALSE
for (j in seq_along(groups)) {
if (levenshtein_distance(v[i], groups[[j]][1]) <= threshold) {
groups[[j]] <- c(groups[[j]], v[i])
matched <- TRUE
break
}
}
if (!matched) {
groups[[length(groups) + 1]] <- c(v[i])
}
}
groups
}
# Utiliser la fonction pour regrouper les éléments de v selon leur ressemblance
groups <- group_similar_elements(v, threshold = 2)
# Afficher les groupes
groups
View(groups)
# Créer un vecteur textuel
v <- t2$sit_harm
# Définir une fonction pour calculer la distance de Levenshtein entre deux chaînes
levenshtein_distance <- function(s1, s2) {
m <- nchar(s1)
n <- nchar(s2)
d <- matrix(0, n + 1, m + 1)
d[1, ] <- 0:m
d[, 1] <- 0:n
for (j in 2:(m + 1)) {
for (i in 2:(n + 1)) {
if (substr(s1, j - 1, j - 1) == substr(s2, i - 1, i - 1)) {
d[i, j] <- d[i - 1, j - 1]
} else {
d[i, j] <- min(d[i - 1, j], d[i, j - 1], d[i - 1, j - 1]) + 1
}
}
}
d[n + 1, m + 1]
}
# Définir une fonction pour regrouper les éléments d'un vecteur selon leur ressemblance
group_similar_elements <- function(v, threshold) {
groups <- list()
for (i in seq_along(v)) {
matched <- FALSE
for (j in seq_along(groups)) {
if (levenshtein_distance(v[i], groups[[j]][1]) <= threshold) {
groups[[j]] <- c(groups[[j]], v[i])
matched <- TRUE
break
}
}
if (!matched) {
groups[[length(groups) + 1]] <- c(v[i])
}
}
groups
}
# Utiliser la fonction pour regrouper les éléments de v selon leur ressemblance
groups <- group_similar_elements(v, threshold = 2)
# Créer un vecteur textuel
v <- as.character(t2$sit_harm)
# Définir une fonction pour calculer la distance de Levenshtein entre deux chaînes
levenshtein_distance <- function(s1, s2) {
m <- nchar(s1)
n <- nchar(s2)
d <- matrix(0, n + 1, m + 1)
d[1, ] <- 0:m
d[, 1] <- 0:n
for (j in 2:(m + 1)) {
for (i in 2:(n + 1)) {
if (substr(s1, j - 1, j - 1) == substr(s2, i - 1, i - 1)) {
d[i, j] <- d[i - 1, j - 1]
} else {
d[i, j] <- min(d[i - 1, j], d[i, j - 1], d[i - 1, j - 1]) + 1
}
}
}
d[n + 1, m + 1]
}
# Définir une fonction pour regrouper les éléments d'un vecteur selon leur ressemblance
group_similar_elements <- function(v, threshold) {
groups <- list()
for (i in seq_along(v)) {
matched <- FALSE
for (j in seq_along(groups)) {
if (levenshtein_distance(v[i], groups[[j]][1]) <= threshold) {
groups[[j]] <- c(groups[[j]], v[i])
matched <- TRUE
break
}
}
if (!matched) {
groups[[length(groups) + 1]] <- c(v[i])
}
}
groups
}
View(groups)
v <- as.character(t2$sit_harm)
# Définir une fonction pour calculer la distance de Levenshtein entre deux chaînes
levenshtein_distance <- function(s1, s2) {
m <- nchar(s1)
n <- nchar(s2)
d <- matrix(0, n + 1, m + 1)
d[1, ] <- 0:m
d[, 1] <- 0:n
for (j in 2:(m + 1)) {
for (i in 2:(n + 1)) {
if (substr(s1, j - 1, j - 1) == substr(s2, i - 1, i - 1)) {
d[i, j] <- d[i - 1, j - 1]
} else {
d[i, j] <- min(d[i - 1, j], d[i, j - 1], d[i - 1, j - 1]) + 1
}
}
}
d[n + 1, m + 1]
}
# Définir une fonction pour regrouper les éléments d'un vecteur selon leur ressemblance
group_similar_elements <- function(v, threshold) {
groups <- list()
for (i in seq_along(v)) {
matched <- FALSE
for (j in seq_along(groups)) {
if (levenshtein_distance(v[i], groups[[j]][1]) <= threshold) {
groups[[j]] <- c(groups[[j]], v[i])
matched <- TRUE
break
}
}
if (!matched) {
groups[[length(groups) + 1]] <- c(v[i])
}
}
groups
}
# Utiliser la fonction pour regrouper les éléments de v selon leur ressemblance
groups <- group_similar_elements(v, threshold = 2)
# Afficher les groupes
groups
View(groups)
groups[[1]]
append_group <- append(groups)
# Créer un vecteur d'identifiants pour chaque groupe
ids <- seq_along(groups)
# Créer un dataframe à partir de la liste groups et des identifiants
df <- data.frame(id = rep(ids, lengths(groups)),
element = unlist(groups))
View(df)
View(df)
f <- df$id |>
fct_infreq() |>
questionr::freq()
#
# Calculer les fréquences pour avoir une idée de la distribution des sites
f <- factor(df$id) |>
fct_infreq() |>
questionr::freq()
View(f)
View(df)
View(f)
f <- factor(df$element) |>
fct_infreq() |>
questionr::freq()
View(f)
f <- factor(df$id) |>
fct_infreq() |>
questionr::freq()
View(f)
View(f)
View(f)
#
# Calculer les fréquences pour avoir une idée de la distribution des sites
f <- factor(df$id[-27]) |>
fct_infreq() |>
questionr::freq()
View(f)
#
# Calculer les fréquences pour avoir une idée de la distribution des sites
f <- factor(df$id[-27,]) |>
fct_infreq() |>
questionr::freq()
#
# Calculer les fréquences pour avoir une idée de la distribution des sites
f <- factor(df$id[df$id!=27]) |>
fct_infreq() |>
questionr::freq()
View(f)
#
# Calculer les fréquences pour avoir une idée de la distribution des sites
f <- factor(df$id[df$id!=c(2,27)]) |>
fct_infreq() |>
questionr::freq()
View(f)
#
# Calculer les fréquences pour avoir une idée de la distribution des sites
f <- factor(df$id[df$id!=c(27)]) |>
fct_infreq() |>
questionr::freq()
#
# Calculer les fréquences pour avoir une idée de la distribution des sites
f <- factor(df$id[df$id!=c(27,2)]) |>
fct_infreq() |>
questionr::freq()
#
# Calculer les fréquences pour avoir une idée de la distribution des sites
f <- factor(df$id[df$id!=c(27)&df$id[df$id!=c(2)]) |>
#
# Calculer les fréquences pour avoir une idée de la distribution des sites
f <- factor(df$id[df$id!=c(27)&df$id[df$id!=c(2)] |>
#
# Calculer les fréquences pour avoir une idée de la distribution des sites
f <- factor(df$id[df$id!=c(27) & id!=c(2)]) |>
fct_infreq() |>
questionr::freq()
#
# Calculer les fréquences pour avoir une idée de la distribution des sites
f <- factor(df$id[id!=c(27)]) |>
fct_infreq() |>
questionr::freq()
#
# Calculer les fréquences pour avoir une idée de la distribution des sites
f <- factor(df$id[df$id!=c(27)]) |>
fct_infreq() |>
questionr::freq()
#
# Calculer les fréquences pour avoir une idée de la distribution des sites
f <- factor(df$id[df$id!=27]) |>
fct_infreq() |>
questionr::freq()
#
# Calculer les fréquences pour avoir une idée de la distribution des sites
f <- factor(df$id[df$id!=27 & df$id!=2]) |>
fct_infreq() |>
questionr::freq()
View(f)
#
# Calculer les fréquences pour avoir une idée de la distribution des sites
f <- factor(df$element[df$id!=27 & df$id!=2]) |>
fct_infreq() |>
questionr::freq()
View(f)
esquisse:::esquisser()
esquisse:::esquisser()
esquisse:::esquisser()
f <- factor(df$element[df$id!=27 & df$id!=2]) |>
fct_infreq() |>
questionr::freq()
View(f)
f <- factor(df$id[df$id!=27 & df$id!=2]) |>
fct_infreq() |>
questionr::freq()
esquisse:::esquisser()
# Calculer les fréquences pour avoir une idée de la distribution des sites
f <- factor(df$id) |>
fct_infreq() |>
questionr::freq()
View(f)
# Calculer les fréquences pour avoir une idée de la distribution des sites
f <- factor(df$element) |>
fct_infreq() |>
questionr::freq()
View(f)
View(groups)
View(df)
